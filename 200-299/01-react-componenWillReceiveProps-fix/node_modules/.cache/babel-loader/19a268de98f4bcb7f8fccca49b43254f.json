{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar component_1 = require(\"../widgets/component\");\n\nvar componentAnnotations_1 = require(\"../widgets/componentAnnotations\");\n\nvar utils_1 = require(\"../utils\");\n\nvar baseFilter_1 = require(\"./baseFilter\");\n\nvar context_1 = require(\"../context/context\");\n\nvar componentRecipes_1 = require(\"../components/framework/componentRecipes\");\n\nvar DateFilter =\n/** @class */\nfunction (_super) {\n  __extends(DateFilter, _super);\n\n  function DateFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DateFilter.prototype.modelFromFloatingFilter = function (from) {\n    return {\n      dateFrom: from,\n      dateTo: this.getDateTo(),\n      type: this.filter,\n      filterType: 'date'\n    };\n  };\n\n  DateFilter.prototype.getApplicableFilterTypes = function () {\n    return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.GREATER_THAN, baseFilter_1.BaseFilter.LESS_THAN, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.IN_RANGE];\n  };\n\n  DateFilter.prototype.bodyTemplate = function (type) {\n    var fromPanelId = type == baseFilter_1.FilterConditionType.MAIN ? \"filterDateFromPanel\" : \"filterDateFromConditionPanel\";\n    var toPanelId = type == baseFilter_1.FilterConditionType.MAIN ? \"filterDateToPanel\" : \"filterDateToConditionPanel\";\n    return \"<div class=\\\"ag-filter-body\\\">\\n                    <div class=\\\"ag-filter-date-from\\\" id=\\\"\" + fromPanelId + \"\\\">\\n                    </div>\\n                    <div class=\\\"ag-filter-date-to\\\" id=\\\"\" + toPanelId + \"\\\">\\n                    </div>\\n                </div>\";\n  };\n\n  DateFilter.prototype.initialiseFilterBodyUi = function (type) {\n    _super.prototype.initialiseFilterBodyUi.call(this, type);\n\n    this.createComponents(type);\n\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      this.setDateFrom_date(this.dateFrom, baseFilter_1.FilterConditionType.MAIN);\n      this.setDateTo_date(this.dateTo, baseFilter_1.FilterConditionType.MAIN);\n      this.setFilterType(this.filterCondition, baseFilter_1.FilterConditionType.MAIN);\n    } else {\n      this.setDateFrom_date(this.dateFromCondition, baseFilter_1.FilterConditionType.CONDITION);\n      this.setDateTo_date(this.dateToCondition, baseFilter_1.FilterConditionType.CONDITION);\n      this.setFilterType(this.filterCondition, baseFilter_1.FilterConditionType.CONDITION);\n    }\n  };\n\n  DateFilter.prototype.createComponents = function (type) {\n    var _this = this;\n\n    var dateComponentParams = {\n      onDateChanged: function onDateChanged() {\n        _this.onDateChanged(type);\n      },\n      filterParams: this.filterParams\n    };\n    this.componentRecipes.newDateComponent(dateComponentParams).then(function (dateToComponent) {\n      if (type === baseFilter_1.FilterConditionType.MAIN) {\n        _this.dateToComponent = dateToComponent;\n      } else {\n        _this.dateToConditionComponent = dateToComponent;\n      }\n\n      var dateToElement = dateToComponent.getGui();\n\n      if (type === baseFilter_1.FilterConditionType.MAIN) {\n        _this.eDateToPanel.appendChild(dateToElement);\n\n        if (_this.dateToComponent.afterGuiAttached) {\n          _this.dateToComponent.afterGuiAttached();\n        }\n      } else {\n        _this.eDateToConditionPanel.appendChild(dateToElement);\n\n        if (_this.dateToConditionComponent.afterGuiAttached) {\n          _this.dateToConditionComponent.afterGuiAttached();\n        }\n      }\n    });\n    this.componentRecipes.newDateComponent(dateComponentParams).then(function (dateComponent) {\n      if (type === baseFilter_1.FilterConditionType.MAIN) {\n        _this.dateFromComponent = dateComponent;\n      } else {\n        _this.dateFromConditionComponent = dateComponent;\n      }\n\n      var dateFromElement = dateComponent.getGui();\n\n      if (type === baseFilter_1.FilterConditionType.MAIN) {\n        _this.eDateFromPanel.appendChild(dateFromElement);\n\n        if (_this.dateFromComponent.afterGuiAttached) {\n          _this.dateFromComponent.afterGuiAttached();\n        }\n      } else {\n        _this.eDateFromConditionPanel.appendChild(dateFromElement);\n\n        if (_this.dateFromConditionComponent.afterGuiAttached) {\n          _this.dateFromConditionComponent.afterGuiAttached();\n        }\n      }\n    });\n  };\n\n  DateFilter.prototype.onDateChanged = function (type) {\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      this.dateFrom = DateFilter.removeTimezone(this.dateFromComponent.getDate());\n      this.dateTo = DateFilter.removeTimezone(this.dateToComponent.getDate());\n    } else {\n      this.dateFromCondition = DateFilter.removeTimezone(this.dateFromComponent.getDate());\n      this.dateToCondition = DateFilter.removeTimezone(this.dateToComponent.getDate());\n    }\n\n    this.onFilterChanged();\n  };\n\n  DateFilter.prototype.refreshFilterBodyUi = function (type) {\n    var panel;\n    var filterTypeValue;\n\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      panel = this.eDateToPanel;\n      filterTypeValue = this.filter;\n    } else {\n      panel = this.eDateToConditionPanel;\n      filterTypeValue = this.filterCondition;\n    }\n\n    if (!panel) return;\n    var visible = filterTypeValue === baseFilter_1.BaseFilter.IN_RANGE;\n    utils_1.Utils.setVisible(panel, visible);\n  };\n\n  DateFilter.prototype.comparator = function () {\n    return this.filterParams.comparator ? this.filterParams.comparator : this.defaultComparator.bind(this);\n  };\n\n  DateFilter.prototype.defaultComparator = function (filterDate, cellValue) {\n    //The default comparator assumes that the cellValue is a date\n    var cellAsDate = cellValue;\n\n    if (cellAsDate < filterDate) {\n      return -1;\n    }\n\n    if (cellAsDate > filterDate) {\n      return 1;\n    }\n\n    return cellValue != null ? 0 : -1;\n  };\n\n  DateFilter.prototype.serialize = function (type) {\n    var dateToComponent = type === baseFilter_1.FilterConditionType.MAIN ? this.dateToComponent : this.dateToConditionComponent;\n    var dateFromComponent = type === baseFilter_1.FilterConditionType.MAIN ? this.dateFromComponent : this.dateFromConditionComponent;\n    var filterType = type === baseFilter_1.FilterConditionType.MAIN ? this.filter : this.filterCondition;\n    return {\n      dateTo: utils_1.Utils.serializeDateToYyyyMmDd(dateToComponent.getDate(), \"-\"),\n      dateFrom: utils_1.Utils.serializeDateToYyyyMmDd(dateFromComponent.getDate(), \"-\"),\n      type: filterType ? filterType : this.defaultFilter,\n      filterType: 'date'\n    };\n  };\n\n  DateFilter.prototype.filterValues = function (type) {\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      if (!this.dateFromComponent) return null;\n      return this.filter !== baseFilter_1.BaseFilter.IN_RANGE ? this.dateFromComponent.getDate() : [this.dateFromComponent.getDate(), this.dateToComponent.getDate()];\n    }\n\n    if (!this.dateFromConditionComponent) return null;\n    return this.filterCondition !== baseFilter_1.BaseFilter.IN_RANGE ? this.dateFromConditionComponent.getDate() : [this.dateFromConditionComponent.getDate(), this.dateToConditionComponent.getDate()];\n  }; // not used by ag-Grid, but exposed as part of the filter API for the client if they want it\n\n\n  DateFilter.prototype.getDateFrom = function () {\n    return utils_1.Utils.serializeDateToYyyyMmDd(this.dateFromComponent.getDate(), \"-\");\n  }; // not used by ag-Grid, but exposed as part of the filter API for the client if they want it\n\n\n  DateFilter.prototype.getDateTo = function () {\n    return utils_1.Utils.serializeDateToYyyyMmDd(this.dateToComponent.getDate(), \"-\");\n  }; // not used by ag-Grid, but exposed as part of the filter API for the client if they want it\n\n\n  DateFilter.prototype.getFilterType = function () {\n    return this.filter;\n  };\n\n  DateFilter.prototype.setDateFrom = function (date, type) {\n    var parsedDate = utils_1.Utils.parseYyyyMmDdToDate(date, \"-\");\n    this.setDateFrom_date(parsedDate, type);\n  };\n\n  DateFilter.prototype.setDateFrom_date = function (parsedDate, type) {\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      this.dateFrom = parsedDate;\n      if (!this.dateFromComponent) return;\n      this.dateFromComponent.setDate(this.dateFrom);\n    } else {\n      this.dateFromCondition = parsedDate;\n      if (!this.dateFromConditionComponent) return;\n      this.dateFromConditionComponent.setDate(this.dateFromCondition);\n    }\n  };\n\n  DateFilter.prototype.setDateTo = function (date, type) {\n    var parsedDate = utils_1.Utils.parseYyyyMmDdToDate(date, \"-\");\n    this.setDateTo_date(parsedDate, type);\n  };\n\n  DateFilter.prototype.setDateTo_date = function (parsedDate, type) {\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      this.dateTo = parsedDate;\n      if (!this.dateToComponent) return;\n      this.dateToComponent.setDate(this.dateTo);\n    } else {\n      this.dateToCondition = parsedDate;\n      if (!this.dateToConditionComponent) return;\n      this.dateToConditionComponent.setDate(this.dateToCondition);\n    }\n  };\n\n  DateFilter.prototype.resetState = function () {\n    this.setDateFrom(null, baseFilter_1.FilterConditionType.MAIN);\n    this.setDateTo(null, baseFilter_1.FilterConditionType.MAIN);\n    this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.MAIN);\n    this.setDateFrom(null, baseFilter_1.FilterConditionType.CONDITION);\n    this.setDateTo(null, baseFilter_1.FilterConditionType.CONDITION);\n    this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.MAIN);\n  };\n\n  DateFilter.prototype.parse = function (model, type) {\n    this.setDateFrom(model.dateFrom, type);\n    this.setDateTo(model.dateTo, type);\n    this.setFilterType(model.type, type);\n  };\n\n  DateFilter.prototype.setType = function (filterType, type) {\n    this.setFilterType(filterType, type);\n  };\n\n  DateFilter.removeTimezone = function (from) {\n    if (!from) {\n      return null;\n    }\n\n    return new Date(from.getFullYear(), from.getMonth(), from.getDate());\n  };\n\n  __decorate([context_1.Autowired('componentRecipes'), __metadata(\"design:type\", componentRecipes_1.ComponentRecipes)], DateFilter.prototype, \"componentRecipes\", void 0);\n\n  __decorate([componentAnnotations_1.QuerySelector('#filterDateFromPanel'), __metadata(\"design:type\", HTMLElement)], DateFilter.prototype, \"eDateFromPanel\", void 0);\n\n  __decorate([componentAnnotations_1.QuerySelector('#filterDateFromConditionPanel'), __metadata(\"design:type\", HTMLElement)], DateFilter.prototype, \"eDateFromConditionPanel\", void 0);\n\n  __decorate([componentAnnotations_1.QuerySelector('#filterDateToPanel'), __metadata(\"design:type\", HTMLElement)], DateFilter.prototype, \"eDateToPanel\", void 0);\n\n  __decorate([componentAnnotations_1.QuerySelector('#filterDateToConditionPanel'), __metadata(\"design:type\", HTMLElement)], DateFilter.prototype, \"eDateToConditionPanel\", void 0);\n\n  return DateFilter;\n}(baseFilter_1.ScalarBaseFilter);\n\nexports.DateFilter = DateFilter;\n\nvar DefaultDateComponent =\n/** @class */\nfunction (_super) {\n  __extends(DefaultDateComponent, _super);\n\n  function DefaultDateComponent() {\n    return _super.call(this, \"<input class=\\\"ag-filter-filter\\\" type=\\\"text\\\" placeholder=\\\"yyyy-mm-dd\\\">\") || this;\n  }\n\n  DefaultDateComponent.prototype.init = function (params) {\n    this.eDateInput = this.getGui();\n\n    if (utils_1.Utils.isBrowserChrome() || params.filterParams.browserDatePicker) {\n      if (utils_1.Utils.isBrowserIE()) {\n        console.warn('ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11, reverting to plain text date picker');\n      } else {\n        this.eDateInput.type = 'date';\n      }\n    }\n\n    this.listener = params.onDateChanged;\n    this.addGuiEventListener('input', this.listener);\n  };\n\n  DefaultDateComponent.prototype.getDate = function () {\n    return utils_1.Utils.parseYyyyMmDdToDate(this.eDateInput.value, \"-\");\n  };\n\n  DefaultDateComponent.prototype.setDate = function (date) {\n    this.eDateInput.value = utils_1.Utils.serializeDateToYyyyMmDd(date, \"-\");\n  };\n\n  return DefaultDateComponent;\n}(component_1.Component);\n\nexports.DefaultDateComponent = DefaultDateComponent;","map":null,"metadata":{},"sourceType":"script"}
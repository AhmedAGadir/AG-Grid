{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../utils\");\n\nvar beanStub_1 = require(\"../context/beanStub\");\n\nvar compIdSequence = new utils_1.NumberSequence();\n\nvar Component =\n/** @class */\nfunction (_super) {\n  __extends(Component, _super);\n\n  function Component(template) {\n    var _this = _super.call(this) || this;\n\n    _this.childComponents = [];\n    _this.annotatedEventListeners = [];\n    _this.visible = true; // unique id for this row component. this is used for getting a reference to the HTML dom.\n    // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying\n    // around as we create a new rowComp instance for the same row node).\n\n    _this.compId = compIdSequence.next();\n\n    if (template) {\n      _this.setTemplate(template);\n    }\n\n    return _this;\n  }\n\n  Component.prototype.getCompId = function () {\n    return this.compId;\n  };\n\n  Component.prototype.instantiate = function (context) {\n    this.instantiateRecurse(this.getGui(), context);\n  };\n\n  Component.prototype.instantiateRecurse = function (parentNode, context) {\n    var _this = this; // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM\n    // which messes up the traversal order of the children.\n\n\n    var childNodeList = utils_1.Utils.copyNodeList(parentNode.childNodes);\n    childNodeList.forEach(function (childNode) {\n      var childComp = context.createComponent(childNode, function (childComp) {\n        var attrList = _this.getAttrLists(childNode);\n\n        _this.copyAttributesFromNode(attrList, childComp.getGui());\n\n        _this.createChildAttributes(attrList, childComp);\n\n        _this.addEventListenersToComponent(attrList, childComp);\n      });\n\n      if (childComp) {\n        _this.swapComponentForNode(childComp, parentNode, childNode);\n      } else {\n        if (childNode.childNodes) {\n          _this.instantiateRecurse(childNode, context);\n        }\n\n        if (childNode instanceof HTMLElement) {\n          var attrList = _this.getAttrLists(childNode);\n\n          _this.addEventListenersToElement(attrList, childNode);\n        }\n      }\n    });\n  };\n\n  Component.prototype.getAttrLists = function (child) {\n    var res = {\n      bindings: [],\n      events: [],\n      normal: []\n    };\n    utils_1.Utils.iterateNamedNodeMap(child.attributes, function (name, value) {\n      var firstCharacter = name.substr(0, 1);\n\n      if (firstCharacter === '(') {\n        var eventName = name.replace('(', '').replace(')', '');\n        res.events.push({\n          name: eventName,\n          value: value\n        });\n      } else if (firstCharacter === '[') {\n        var bindingName = name.replace('[', '').replace(']', '');\n        res.bindings.push({\n          name: bindingName,\n          value: value\n        });\n      } else {\n        res.normal.push({\n          name: name,\n          value: value\n        });\n      }\n    });\n    return res;\n  };\n\n  Component.prototype.addEventListenersToElement = function (attrLists, element) {\n    var _this = this;\n\n    this.addEventListenerCommon(attrLists, function (eventName, listener) {\n      _this.addDestroyableEventListener(element, eventName, listener);\n    });\n  };\n\n  Component.prototype.addEventListenersToComponent = function (attrLists, component) {\n    var _this = this;\n\n    this.addEventListenerCommon(attrLists, function (eventName, listener) {\n      _this.addDestroyableEventListener(component, eventName, listener);\n    });\n  };\n\n  Component.prototype.addEventListenerCommon = function (attrLists, callback) {\n    var _this = this;\n\n    var methodAliases = this.getAgComponentMetaData('methods');\n    attrLists.events.forEach(function (nameValue) {\n      var methodName = nameValue.value;\n      var methodAlias = utils_1.Utils.find(methodAliases, 'alias', methodName);\n      var methodNameToUse = utils_1.Utils.exists(methodAlias) ? methodAlias.methodName : methodName;\n      var listener = _this[methodNameToUse];\n\n      if (typeof listener !== 'function') {\n        console.warn('ag-Grid: count not find callback ' + methodName);\n        return;\n      }\n\n      var eventCamelCase = utils_1.Utils.hyphenToCamelCase(nameValue.name);\n      callback(eventCamelCase, listener.bind(_this));\n    });\n  };\n\n  Component.prototype.createChildAttributes = function (attrLists, child) {\n    var _this = this;\n\n    var childAttributes = {};\n    attrLists.normal.forEach(function (nameValue) {\n      var nameCamelCase = utils_1.Utils.hyphenToCamelCase(nameValue.name);\n      childAttributes[nameCamelCase] = nameValue.value;\n    });\n    attrLists.bindings.forEach(function (nameValue) {\n      var nameCamelCase = utils_1.Utils.hyphenToCamelCase(nameValue.name);\n      childAttributes[nameCamelCase] = _this[nameValue.value];\n    });\n    child.props = childAttributes;\n  };\n\n  Component.prototype.copyAttributesFromNode = function (attrLists, childNode) {\n    attrLists.normal.forEach(function (nameValue) {\n      childNode.setAttribute(nameValue.name, nameValue.value);\n    });\n  };\n\n  Component.prototype.swapComponentForNode = function (newComponent, parentNode, childNode) {\n    var eComponent = newComponent.getGui();\n    parentNode.replaceChild(eComponent, childNode);\n    parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);\n    this.childComponents.push(newComponent);\n    this.swapInComponentForQuerySelectors(newComponent, childNode);\n  };\n\n  Component.prototype.swapInComponentForQuerySelectors = function (newComponent, childNode) {\n    var thisProto = Object.getPrototypeOf(this);\n    var thisNoType = this;\n\n    while (thisProto != null) {\n      var metaData = thisProto.__agComponentMetaData;\n      var currentProtoName = thisProto.constructor.name;\n\n      if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {\n        metaData[currentProtoName].querySelectors.forEach(function (querySelector) {\n          if (thisNoType[querySelector.attributeName] === childNode) {\n            thisNoType[querySelector.attributeName] = newComponent;\n          }\n        });\n      }\n\n      thisProto = Object.getPrototypeOf(thisProto);\n    }\n  };\n\n  Component.prototype.setTemplate = function (template) {\n    var eGui = utils_1.Utils.loadTemplate(template);\n    this.setTemplateFromElement(eGui);\n  };\n\n  Component.prototype.setTemplateFromElement = function (element) {\n    this.eGui = element;\n    this.eGui.__agComponent = this;\n    this.addAnnotatedEventListeners();\n    this.wireQuerySelectors();\n  };\n\n  Component.prototype.wireQuerySelectors = function () {\n    var _this = this;\n\n    if (!this.eGui) {\n      return;\n    }\n\n    var thisProto = Object.getPrototypeOf(this);\n\n    var _loop_1 = function _loop_1() {\n      var metaData = thisProto.__agComponentMetaData;\n      var currentProtoName = thisProto.constructor.name;\n\n      if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {\n        var thisNoType_1 = this_1;\n        metaData[currentProtoName].querySelectors.forEach(function (querySelector) {\n          var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);\n\n          if (resultOfQuery) {\n            var backingComponent = resultOfQuery.__agComponent;\n\n            if (backingComponent) {\n              thisNoType_1[querySelector.attributeName] = backingComponent;\n            } else {\n              thisNoType_1[querySelector.attributeName] = resultOfQuery;\n            }\n          } else {// put debug msg in here if query selector fails???\n          }\n        });\n      }\n\n      thisProto = Object.getPrototypeOf(thisProto);\n    };\n\n    var this_1 = this;\n\n    while (thisProto != null) {\n      _loop_1();\n    }\n  };\n\n  Component.prototype.addAnnotatedEventListeners = function () {\n    var _this = this;\n\n    this.removeAnnotatedEventListeners();\n\n    if (!this.eGui) {\n      return;\n    }\n\n    var listenerMethods = this.getAgComponentMetaData('listenerMethods');\n\n    if (utils_1.Utils.missingOrEmpty(listenerMethods)) {\n      return;\n    }\n\n    if (!this.annotatedEventListeners) {\n      this.annotatedEventListeners = [];\n    }\n\n    listenerMethods.forEach(function (eventListener) {\n      var listener = _this[eventListener.methodName].bind(_this);\n\n      _this.eGui.addEventListener(eventListener.eventName, listener);\n\n      _this.annotatedEventListeners.push({\n        eventName: eventListener.eventName,\n        listener: listener\n      });\n    });\n  };\n\n  Component.prototype.getAgComponentMetaData = function (key) {\n    var res = [];\n    var thisProto = Object.getPrototypeOf(this);\n\n    while (thisProto != null) {\n      var metaData = thisProto.__agComponentMetaData;\n      var currentProtoName = thisProto.constructor.name;\n\n      if (metaData && metaData[currentProtoName] && metaData[currentProtoName][key]) {\n        res = res.concat(metaData[currentProtoName][key]);\n      }\n\n      thisProto = Object.getPrototypeOf(thisProto);\n    }\n\n    return res;\n  };\n\n  Component.prototype.removeAnnotatedEventListeners = function () {\n    var _this = this;\n\n    if (!this.annotatedEventListeners) {\n      return;\n    }\n\n    if (!this.eGui) {\n      return;\n    }\n\n    this.annotatedEventListeners.forEach(function (eventListener) {\n      _this.eGui.removeEventListener(eventListener.eventName, eventListener.listener);\n    });\n    this.annotatedEventListeners = [];\n  };\n\n  Component.prototype.getGui = function () {\n    return this.eGui;\n  }; // this method is for older code, that wants to provide the gui element,\n  // it is not intended for this to be in ag-Stack\n\n\n  Component.prototype.setGui = function (eGui) {\n    this.eGui = eGui;\n  };\n\n  Component.prototype.queryForHtmlElement = function (cssSelector) {\n    return this.eGui.querySelector(cssSelector);\n  };\n\n  Component.prototype.queryForHtmlInputElement = function (cssSelector) {\n    return this.eGui.querySelector(cssSelector);\n  };\n\n  Component.prototype.appendChild = function (newChild) {\n    if (utils_1.Utils.isNodeOrElement(newChild)) {\n      this.eGui.appendChild(newChild);\n    } else {\n      var childComponent = newChild;\n      this.eGui.appendChild(childComponent.getGui());\n      this.childComponents.push(childComponent);\n    }\n  };\n\n  Component.prototype.addFeature = function (context, feature) {\n    context.wireBean(feature);\n\n    if (feature.destroy) {\n      this.addDestroyFunc(feature.destroy.bind(feature));\n    }\n  };\n\n  Component.prototype.isVisible = function () {\n    return this.visible;\n  };\n\n  Component.prototype.setVisible = function (visible) {\n    if (visible !== this.visible) {\n      this.visible = visible;\n      utils_1.Utils.addOrRemoveCssClass(this.eGui, 'ag-hidden', !visible);\n      var event_1 = {\n        type: Component.EVENT_VISIBLE_CHANGED,\n        visible: this.visible\n      };\n      this.dispatchEvent(event_1);\n    }\n  };\n\n  Component.prototype.addOrRemoveCssClass = function (className, addOrRemove) {\n    utils_1.Utils.addOrRemoveCssClass(this.eGui, className, addOrRemove);\n  };\n\n  Component.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.childComponents.forEach(function (childComponent) {\n      if (childComponent) {\n        childComponent.destroy();\n      }\n    });\n    this.childComponents.length = 0;\n    this.removeAnnotatedEventListeners();\n  };\n\n  Component.prototype.addGuiEventListener = function (event, listener) {\n    var _this = this;\n\n    this.getGui().addEventListener(event, listener);\n    this.addDestroyFunc(function () {\n      return _this.getGui().removeEventListener(event, listener);\n    });\n  };\n\n  Component.prototype.addCssClass = function (className) {\n    utils_1.Utils.addCssClass(this.getGui(), className);\n  };\n\n  Component.prototype.removeCssClass = function (className) {\n    utils_1.Utils.removeCssClass(this.getGui(), className);\n  };\n\n  Component.prototype.getAttribute = function (key) {\n    var eGui = this.getGui();\n\n    if (eGui) {\n      return eGui.getAttribute(key);\n    } else {\n      return null;\n    }\n  };\n\n  Component.prototype.getRefElement = function (refName) {\n    return this.queryForHtmlElement('[ref=\"' + refName + '\"]');\n  };\n\n  Component.EVENT_VISIBLE_CHANGED = 'visibleChanged';\n  return Component;\n}(beanStub_1.BeanStub);\n\nexports.Component = Component;","map":null,"metadata":{},"sourceType":"script"}
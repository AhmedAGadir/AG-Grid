{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../utils\");\n\nvar componentAnnotations_1 = require(\"../widgets/componentAnnotations\");\n\nvar baseFilter_1 = require(\"./baseFilter\");\n\nvar NumberFilter =\n/** @class */\nfunction (_super) {\n  __extends(NumberFilter, _super);\n\n  function NumberFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NumberFilter.prototype.modelFromFloatingFilter = function (from) {\n    return {\n      type: this.filter,\n      filter: Number(from),\n      filterTo: this.filterNumberTo,\n      filterType: 'number'\n    };\n  };\n\n  NumberFilter.prototype.getApplicableFilterTypes = function () {\n    return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.LESS_THAN, baseFilter_1.BaseFilter.LESS_THAN_OR_EQUAL, baseFilter_1.BaseFilter.GREATER_THAN, baseFilter_1.BaseFilter.GREATER_THAN_OR_EQUAL, baseFilter_1.BaseFilter.IN_RANGE];\n  };\n\n  NumberFilter.prototype.bodyTemplate = function (type) {\n    var translate = this.translate.bind(this);\n    var fieldId = type == baseFilter_1.FilterConditionType.MAIN ? \"filterText\" : \"filterConditionText\";\n    var filterNumberToPanelId = type == baseFilter_1.FilterConditionType.MAIN ? \"filterNumberToPanel\" : \"filterNumberToPanelCondition\";\n    var fieldToId = type == baseFilter_1.FilterConditionType.MAIN ? \"filterToText\" : \"filterToConditionText\";\n    return \"<div class=\\\"ag-filter-body\\\">\\n            <div>\\n                <input class=\\\"ag-filter-filter\\\" id=\\\"\" + fieldId + \"\\\" type=\\\"text\\\" placeholder=\\\"\" + translate('filterOoo') + \"\\\"/>\\n            </div>\\n             <div class=\\\"ag-filter-number-to\\\" id=\\\"\" + filterNumberToPanelId + \"\\\">\\n                <input class=\\\"ag-filter-filter\\\" id=\\\"\" + fieldToId + \"\\\" type=\\\"text\\\" placeholder=\\\"\" + translate('filterOoo') + \"\\\"/>\\n            </div>\\n        </div>\";\n  };\n\n  NumberFilter.prototype.initialiseFilterBodyUi = function (type) {\n    _super.prototype.initialiseFilterBodyUi.call(this, type);\n\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      this.eFilterTextField = this.queryForHtmlInputElement(\"#filterText\");\n      this.addFilterChangedEventListeners(type, this.eFilterTextField, this.eFilterToTextField);\n    } else {\n      this.eFilterTextConditionField = this.queryForHtmlInputElement(\"#filterConditionText\");\n      this.addFilterChangedEventListeners(type, this.eFilterTextConditionField, this.eFilterToConditionText);\n      this.setFilter(this.filterNumberCondition, baseFilter_1.FilterConditionType.CONDITION);\n      this.setFilterTo(this.filterNumberConditionTo, baseFilter_1.FilterConditionType.CONDITION);\n      this.setFilterType(this.filterCondition, baseFilter_1.FilterConditionType.CONDITION);\n    }\n  };\n\n  NumberFilter.prototype.addFilterChangedEventListeners = function (type, filterElement, filterToElement) {\n    var _this = this;\n\n    var debounceMs = this.getDebounceMs(this.filterParams);\n    var toDebounce = utils_1.Utils.debounce(function () {\n      return _this.onTextFieldsChanged(type, filterElement, filterToElement);\n    }, debounceMs);\n    this.addDestroyableEventListener(filterElement, \"input\", toDebounce);\n    this.addDestroyableEventListener(filterToElement, \"input\", toDebounce);\n  };\n\n  NumberFilter.prototype.afterGuiAttached = function () {\n    this.eFilterTextField.focus();\n  };\n\n  NumberFilter.prototype.comparator = function () {\n    return function (left, right) {\n      if (left === right) {\n        return 0;\n      }\n\n      if (left < right) {\n        return 1;\n      }\n\n      if (left > right) {\n        return -1;\n      }\n    };\n  };\n\n  NumberFilter.prototype.onTextFieldsChanged = function (type, filterElement, filterToElement) {\n    var newFilter = this.stringToFloat(filterElement.value);\n    var newFilterTo = this.stringToFloat(filterToElement.value);\n\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      if (this.filterNumber !== newFilter || this.filterNumberTo !== newFilterTo) {\n        this.filterNumber = newFilter;\n        this.filterNumberTo = newFilterTo;\n        this.onFilterChanged();\n      }\n    } else {\n      if (this.filterNumberCondition !== newFilter || this.filterNumberConditionTo !== newFilterTo) {\n        this.filterNumberCondition = newFilter;\n        this.filterNumberConditionTo = newFilterTo;\n        this.onFilterChanged();\n      }\n    }\n  };\n\n  NumberFilter.prototype.filterValues = function (type) {\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      return this.filter !== baseFilter_1.BaseFilter.IN_RANGE ? this.asNumber(this.filterNumber) : [this.asNumber(this.filterNumber), this.asNumber(this.filterNumberTo)];\n    }\n\n    return this.filterCondition !== baseFilter_1.BaseFilter.IN_RANGE ? this.asNumber(this.filterNumberCondition) : [this.asNumber(this.filterNumberCondition), this.asNumber(this.filterNumberConditionTo)];\n  };\n\n  NumberFilter.prototype.asNumber = function (value) {\n    return utils_1.Utils.isNumeric(value) ? value : null;\n  };\n\n  NumberFilter.prototype.stringToFloat = function (value) {\n    var filterText = utils_1.Utils.makeNull(value);\n\n    if (filterText && filterText.trim() === '') {\n      filterText = null;\n    }\n\n    var newFilter;\n\n    if (filterText !== null && filterText !== undefined) {\n      newFilter = parseFloat(filterText);\n    } else {\n      newFilter = null;\n    }\n\n    return newFilter;\n  };\n\n  NumberFilter.prototype.setFilter = function (filter, type) {\n    filter = utils_1.Utils.makeNull(filter);\n\n    if (filter !== null && !(typeof filter === 'number')) {\n      filter = parseFloat(filter);\n    }\n\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      this.filterNumber = filter;\n      if (!this.eFilterTextField) return;\n      this.eFilterTextField.value = filter;\n    } else {\n      this.filterNumberCondition = filter;\n      if (!this.eFilterTextConditionField) return;\n      this.eFilterTextConditionField.value = filter;\n    }\n  };\n\n  NumberFilter.prototype.setFilterTo = function (filter, type) {\n    filter = utils_1.Utils.makeNull(filter);\n\n    if (filter !== null && !(typeof filter === 'number')) {\n      filter = parseFloat(filter);\n    }\n\n    if (type === baseFilter_1.FilterConditionType.MAIN) {\n      this.filterNumberTo = filter;\n      if (!this.eFilterToTextField) return;\n      this.eFilterToTextField.value = filter;\n    } else {\n      this.filterNumberConditionTo = filter;\n      if (!this.eFilterToConditionText) return;\n      this.eFilterToConditionText.value = filter;\n    }\n  };\n\n  NumberFilter.prototype.getFilter = function (type) {\n    return type === baseFilter_1.FilterConditionType.MAIN ? this.filterNumber : this.filterNumberCondition;\n  };\n\n  NumberFilter.prototype.serialize = function (type) {\n    var filter = type === baseFilter_1.FilterConditionType.MAIN ? this.filter : this.filterCondition;\n    var filterNumber = type === baseFilter_1.FilterConditionType.MAIN ? this.filterNumber : this.filterNumberCondition;\n    var filterNumberTo = type === baseFilter_1.FilterConditionType.MAIN ? this.filterNumberTo : this.filterNumberConditionTo;\n    return {\n      type: filter ? filter : this.defaultFilter,\n      filter: filterNumber,\n      filterTo: filterNumberTo,\n      filterType: 'number'\n    };\n  };\n\n  NumberFilter.prototype.parse = function (model, type) {\n    this.setFilterType(model.type, type);\n    this.setFilter(model.filter, type);\n    this.setFilterTo(model.filterTo, type);\n  };\n\n  NumberFilter.prototype.refreshFilterBodyUi = function (type) {\n    var filterType = type === baseFilter_1.FilterConditionType.MAIN ? this.filter : this.filterCondition;\n    var panel = type === baseFilter_1.FilterConditionType.MAIN ? this.eNumberToPanel : this.eNumberToConditionPanel;\n    if (!panel) return;\n    var visible = filterType === NumberFilter.IN_RANGE;\n    utils_1.Utils.setVisible(panel, visible);\n  };\n\n  NumberFilter.prototype.resetState = function () {\n    this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.MAIN);\n    this.setFilter(null, baseFilter_1.FilterConditionType.MAIN);\n    this.setFilterTo(null, baseFilter_1.FilterConditionType.MAIN);\n    this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.CONDITION);\n    this.setFilter(null, baseFilter_1.FilterConditionType.CONDITION);\n    this.setFilterTo(null, baseFilter_1.FilterConditionType.CONDITION);\n  };\n\n  NumberFilter.prototype.setType = function (filterType, type) {\n    this.setFilterType(filterType, type);\n  };\n\n  NumberFilter.LESS_THAN = 'lessThan'; //3;\n\n  __decorate([componentAnnotations_1.QuerySelector('#filterNumberToPanel'), __metadata(\"design:type\", HTMLElement)], NumberFilter.prototype, \"eNumberToPanel\", void 0);\n\n  __decorate([componentAnnotations_1.QuerySelector('#filterNumberToPanelCondition'), __metadata(\"design:type\", HTMLElement)], NumberFilter.prototype, \"eNumberToConditionPanel\", void 0);\n\n  __decorate([componentAnnotations_1.QuerySelector('#filterToText'), __metadata(\"design:type\", HTMLInputElement)], NumberFilter.prototype, \"eFilterToTextField\", void 0);\n\n  __decorate([componentAnnotations_1.QuerySelector('#filterToConditionText'), __metadata(\"design:type\", HTMLInputElement)], NumberFilter.prototype, \"eFilterToConditionText\", void 0);\n\n  return NumberFilter;\n}(baseFilter_1.ScalarBaseFilter);\n\nexports.NumberFilter = NumberFilter;","map":null,"metadata":{},"sourceType":"script"}
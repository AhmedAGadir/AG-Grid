{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar component_1 = require(\"../../widgets/component\");\n\nvar constants_1 = require(\"../../constants\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar LargeTextCellEditor =\n/** @class */\nfunction (_super) {\n  __extends(LargeTextCellEditor, _super);\n\n  function LargeTextCellEditor() {\n    return _super.call(this, LargeTextCellEditor.TEMPLATE) || this;\n  }\n\n  LargeTextCellEditor.prototype.init = function (params) {\n    this.params = params;\n    this.focusAfterAttached = params.cellStartedEdit;\n    this.textarea = document.createElement(\"textarea\");\n    this.textarea.maxLength = params.maxLength ? params.maxLength : \"200\";\n    this.textarea.cols = params.cols ? params.cols : \"60\";\n    this.textarea.rows = params.rows ? params.rows : \"10\";\n\n    if (utils_1.Utils.exists(params.value)) {\n      this.textarea.value = params.value.toString();\n    }\n\n    this.getGui().querySelector('.ag-large-textarea').appendChild(this.textarea);\n    this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n  };\n\n  LargeTextCellEditor.prototype.onKeyDown = function (event) {\n    var key = event.which || event.keyCode;\n\n    if (key == constants_1.Constants.KEY_LEFT || key == constants_1.Constants.KEY_UP || key == constants_1.Constants.KEY_RIGHT || key == constants_1.Constants.KEY_DOWN || event.shiftKey && key == constants_1.Constants.KEY_ENTER) {\n      // shift+enter allows for newlines\n      event.stopPropagation();\n    }\n  };\n\n  LargeTextCellEditor.prototype.afterGuiAttached = function () {\n    if (this.focusAfterAttached) {\n      this.textarea.focus();\n    }\n  };\n\n  LargeTextCellEditor.prototype.getValue = function () {\n    return this.params.parseValue(this.textarea.value);\n  };\n\n  LargeTextCellEditor.prototype.isPopup = function () {\n    return true;\n  };\n\n  LargeTextCellEditor.TEMPLATE = // tab index is needed so we can focus, which is needed for keyboard events\n  '<div class=\"ag-large-text\" tabindex=\"0\">' + '<div class=\"ag-large-textarea\"></div>' + '</div>';\n  return LargeTextCellEditor;\n}(component_1.Component);\n\nexports.LargeTextCellEditor = LargeTextCellEditor;","map":null,"metadata":{},"sourceType":"script"}
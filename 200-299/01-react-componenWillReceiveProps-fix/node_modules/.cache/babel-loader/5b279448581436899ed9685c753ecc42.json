{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"./context/context\");\n\nvar utils_1 = require(\"./utils\");\n\nvar themeNames = ['fresh', 'dark', 'blue', 'bootstrap', 'material', 'balham-dark', 'balham'];\nvar themes = themeNames.concat(themeNames.map(function (name) {\n  return \"theme-\" + name;\n}));\nvar themeClass = new RegExp(\"ag-(\" + themes.join('|') + \")\");\nvar matGridSize = 8;\nvar freshGridSize = 4;\nvar balhamGridSize = 4;\nvar HARD_CODED_SIZES = {\n  'ag-theme-material': {\n    headerHeight: matGridSize * 7,\n    virtualItemHeight: matGridSize * 5,\n    rowHeight: matGridSize * 6\n  },\n  'ag-theme-classic': {\n    headerHeight: 25,\n    virtualItemHeight: freshGridSize * 5,\n    rowHeight: 25\n  },\n  'ag-theme-balham': {\n    headerHeight: balhamGridSize * 8,\n    virtualItemHeight: balhamGridSize * 7,\n    rowHeight: balhamGridSize * 7\n  }\n};\n\nvar Environment =\n/** @class */\nfunction () {\n  function Environment() {\n    this.sassVariables = {};\n  } // Approach described here:\n  // https://www.ofcodeandcolor.com/2017/04/02/encoding-data-in-css/\n\n\n  Environment.prototype.loadSassVariables = function () {\n    /*\n    var element = document.createElement('div');\n    element.className = 'sass-variables';\n    this.eGridDiv.appendChild(element);\n     var content = window.getComputedStyle(element, '::after').content;\n     try {\n        this.sassVariables = JSON.parse(JSON.parse(content));\n    } catch (e) {\n        throw new Error(\"Failed loading the theme sizing - check that you have the theme set up correctly.\");\n    }\n     this.eGridDiv.removeChild(element);\n    */\n  };\n\n  Environment.prototype.getSassVariable = function (theme, key) {\n    if (theme == 'ag-theme-material') {\n      return HARD_CODED_SIZES['ag-theme-material'][key];\n    } else if (theme == 'ag-theme-balham' || theme == 'ag-theme-balham-dark') {\n      return HARD_CODED_SIZES['ag-theme-balham'][key];\n    }\n\n    return HARD_CODED_SIZES['ag-theme-classic'][key];\n    /*\n    const result = parseInt(this.sassVariables[key]);\n    if (!result || isNaN(result)) {\n        throw new Error(`Failed loading ${key} Sass variable from ${this.sassVariables}`);\n    }\n    return result;\n    */\n  };\n\n  Environment.prototype.getTheme = function () {\n    var themeMatch;\n    var element = this.eGridDiv;\n\n    while (element != document.documentElement && themeMatch == null) {\n      themeMatch = element.className.match(themeClass);\n      element = element.parentElement;\n\n      if (element == null) {\n        break;\n      }\n    }\n\n    if (themeMatch) {\n      var userTheme_1 = themeMatch[0];\n      var oldThemes = ['ag-fresh', 'ag-dark', 'ag-blue', 'ag-material', 'ag-bootstrap'];\n      var usingOldTheme = oldThemes.indexOf(userTheme_1) >= 0;\n\n      if (usingOldTheme) {\n        var newTheme_1 = userTheme_1.replace('ag-', 'ag-theme-');\n\n        utils_1._.doOnce(function () {\n          return console.warn(\"ag-Grid: As of v19 old theme are no longer provided. Please replacement \" + userTheme_1 + \" with \" + newTheme_1 + \".\");\n        }, 'using-old-theme');\n      }\n\n      return userTheme_1;\n    } else {\n      return 'ag-theme-fresh';\n    }\n  };\n\n  __decorate([context_1.Autowired('eGridDiv'), __metadata(\"design:type\", HTMLElement)], Environment.prototype, \"eGridDiv\", void 0);\n\n  Environment = __decorate([context_1.Bean('environment')], Environment);\n  return Environment;\n}();\n\nexports.Environment = Environment;","map":null,"metadata":{},"sourceType":"script"}
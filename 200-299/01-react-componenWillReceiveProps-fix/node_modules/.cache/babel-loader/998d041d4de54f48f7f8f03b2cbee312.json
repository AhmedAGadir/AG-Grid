{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"../events\");\n\nvar propertyKeys_1 = require(\"../propertyKeys\");\n\nvar utils_1 = require(\"../utils\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar ComponentUtil =\n/** @class */\nfunction () {\n  function ComponentUtil() {}\n\n  ComponentUtil.getEventCallbacks = function () {\n    if (!ComponentUtil.EVENT_CALLBACKS) {\n      ComponentUtil.EVENT_CALLBACKS = [];\n      ComponentUtil.EVENT_CALLBACKS_NO_PREFIX = [];\n      ComponentUtil.EVENTS.forEach(function (eventName) {\n        ComponentUtil.EVENT_CALLBACKS.push(ComponentUtil.getCallbackForEvent(eventName));\n        ComponentUtil.EVENT_CALLBACKS_NO_PREFIX.push(eventName);\n      });\n    }\n\n    return ComponentUtil.EVENT_CALLBACKS;\n  };\n\n  ComponentUtil.copyAttributesToGridOptions = function (gridOptions, component, skipEventDeprecationCheck) {\n    if (skipEventDeprecationCheck === void 0) {\n      skipEventDeprecationCheck = false;\n    }\n\n    checkForDeprecated(component); // create empty grid options if none were passed\n\n    if (typeof gridOptions !== 'object') {\n      gridOptions = {};\n    } // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'\n\n\n    var pGridOptions = gridOptions; // add in all the simple properties\n\n    ComponentUtil.ARRAY_PROPERTIES.concat(ComponentUtil.STRING_PROPERTIES).concat(ComponentUtil.OBJECT_PROPERTIES).concat(ComponentUtil.FUNCTION_PROPERTIES).forEach(function (key) {\n      if (typeof component[key] !== 'undefined') {\n        pGridOptions[key] = component[key];\n      }\n    });\n    ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {\n      if (typeof component[key] !== 'undefined') {\n        pGridOptions[key] = ComponentUtil.toBoolean(component[key]);\n      }\n    });\n    ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {\n      if (typeof component[key] !== 'undefined') {\n        pGridOptions[key] = ComponentUtil.toNumber(component[key]);\n      }\n    });\n    ComponentUtil.getEventCallbacks().forEach(function (funcName) {\n      if (typeof component[funcName] !== 'undefined') {\n        pGridOptions[funcName] = component[funcName];\n      }\n    }); // purely for event deprecation checks (for frameworks - wouldn't apply for non-fw versions)\n\n    if (!skipEventDeprecationCheck) {\n      ComponentUtil.EVENT_CALLBACKS_NO_PREFIX.forEach(function (funcName) {\n        // react uses onXXX...not sure why this is diff to the other frameworks\n        var onMethodName = ComponentUtil.getCallbackForEvent(funcName);\n\n        if (typeof component[funcName] !== 'undefined' || typeof component[onMethodName] !== 'undefined') {\n          gridOptionsWrapper_1.GridOptionsWrapper.checkEventDeprecation(funcName);\n        }\n      });\n    }\n\n    return gridOptions;\n  };\n\n  ComponentUtil.getCallbackForEvent = function (eventName) {\n    if (!eventName || eventName.length < 2) {\n      return eventName;\n    } else {\n      return 'on' + eventName[0].toUpperCase() + eventName.substr(1);\n    }\n  };\n\n  ComponentUtil.processOnChange = function (changes, gridOptions, api, columnApi) {\n    if (!changes) {\n      return;\n    }\n\n    checkForDeprecated(changes); // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'\n\n    var pGridOptions = gridOptions; // check if any change for the simple types, and if so, then just copy in the new value\n\n    ComponentUtil.ARRAY_PROPERTIES.concat(ComponentUtil.OBJECT_PROPERTIES).concat(ComponentUtil.STRING_PROPERTIES).forEach(function (key) {\n      if (changes[key]) {\n        pGridOptions[key] = changes[key].currentValue;\n      }\n    });\n    ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {\n      if (changes[key]) {\n        pGridOptions[key] = ComponentUtil.toBoolean(changes[key].currentValue);\n      }\n    });\n    ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {\n      if (changes[key]) {\n        pGridOptions[key] = ComponentUtil.toNumber(changes[key].currentValue);\n      }\n    });\n    ComponentUtil.getEventCallbacks().forEach(function (funcName) {\n      if (changes[funcName]) {\n        pGridOptions[funcName] = changes[funcName].currentValue;\n      }\n    });\n\n    if (changes.showToolPanel) {\n      api.showToolPanel(ComponentUtil.toBoolean(changes.showToolPanel.currentValue));\n    }\n\n    if (changes.quickFilterText) {\n      api.setQuickFilter(changes.quickFilterText.currentValue);\n    }\n\n    if (changes.rowData) {\n      api.setRowData(changes.rowData.currentValue);\n    }\n\n    if (changes.pinnedTopRowData) {\n      api.setPinnedTopRowData(changes.pinnedTopRowData.currentValue);\n    }\n\n    if (changes.pinnedBottomRowData) {\n      api.setPinnedBottomRowData(changes.pinnedBottomRowData.currentValue);\n    }\n\n    if (changes.columnDefs) {\n      api.setColumnDefs(changes.columnDefs.currentValue, \"gridOptionsChanged\");\n    }\n\n    if (changes.datasource) {\n      api.setDatasource(changes.datasource.currentValue);\n    }\n\n    if (changes.headerHeight) {\n      api.setHeaderHeight(ComponentUtil.toNumber(changes.headerHeight.currentValue));\n    }\n\n    if (changes.paginationPageSize) {\n      api.paginationSetPageSize(ComponentUtil.toNumber(changes.paginationPageSize.currentValue));\n    }\n\n    if (changes.pivotMode) {\n      columnApi.setPivotMode(ComponentUtil.toBoolean(changes.pivotMode.currentValue));\n    }\n\n    if (changes.groupRemoveSingleChildren) {\n      api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changes.groupRemoveSingleChildren.currentValue));\n    }\n\n    if (changes.suppressRowDrag) {\n      api.setSuppressRowDrag(ComponentUtil.toBoolean(changes.suppressRowDrag.currentValue));\n    }\n\n    if (changes.gridAutoHeight) {\n      api.setGridAutoHeight(ComponentUtil.toBoolean(changes.gridAutoHeight.currentValue));\n    }\n\n    if (changes.suppressClipboardPaste) {\n      api.setSuppressClipboardPaste(ComponentUtil.toBoolean(changes.suppressClipboardPaste.currentValue));\n    }\n\n    if (changes.sideBar) {\n      api.setSideBar(changes.sideBar.currentValue);\n    } // copy changes into an event for dispatch\n\n\n    var event = {\n      type: events_1.Events.EVENT_COMPONENT_STATE_CHANGED,\n      api: gridOptions.api,\n      columnApi: gridOptions.columnApi\n    };\n    utils_1.Utils.iterateObject(changes, function (key, value) {\n      event[key] = value;\n    });\n    api.dispatchEvent(event);\n  };\n\n  ComponentUtil.toBoolean = function (value) {\n    if (typeof value === 'boolean') {\n      return value;\n    } else if (typeof value === 'string') {\n      // for boolean, compare to empty String to allow attributes appearing with\n      // not value to be treated as 'true'\n      return value.toUpperCase() === 'TRUE' || value == '';\n    } else {\n      return false;\n    }\n  };\n\n  ComponentUtil.toNumber = function (value) {\n    if (typeof value === 'number') {\n      return value;\n    } else if (typeof value === 'string') {\n      return Number(value);\n    } else {\n      return undefined;\n    }\n  }; // all the events are populated in here AFTER this class (at the bottom of the file).\n\n\n  ComponentUtil.EVENTS = [];\n  ComponentUtil.STRING_PROPERTIES = propertyKeys_1.PropertyKeys.STRING_PROPERTIES;\n  ComponentUtil.OBJECT_PROPERTIES = propertyKeys_1.PropertyKeys.OBJECT_PROPERTIES;\n  ComponentUtil.ARRAY_PROPERTIES = propertyKeys_1.PropertyKeys.ARRAY_PROPERTIES;\n  ComponentUtil.NUMBER_PROPERTIES = propertyKeys_1.PropertyKeys.NUMBER_PROPERTIES;\n  ComponentUtil.BOOLEAN_PROPERTIES = propertyKeys_1.PropertyKeys.BOOLEAN_PROPERTIES;\n  ComponentUtil.FUNCTION_PROPERTIES = propertyKeys_1.PropertyKeys.FUNCTION_PROPERTIES;\n  ComponentUtil.ALL_PROPERTIES = propertyKeys_1.PropertyKeys.ALL_PROPERTIES;\n  return ComponentUtil;\n}();\n\nexports.ComponentUtil = ComponentUtil;\nutils_1.Utils.iterateObject(events_1.Events, function (key, value) {\n  ComponentUtil.EVENTS.push(value);\n});\n\nfunction checkForDeprecated(changes) {\n  if (changes.rowDeselected || changes.onRowDeselected) {\n    console.warn('ag-grid: as of v3.4 rowDeselected no longer exists. Please check the docs.');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
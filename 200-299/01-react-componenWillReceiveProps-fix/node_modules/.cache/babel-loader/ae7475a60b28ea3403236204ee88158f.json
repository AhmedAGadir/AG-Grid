{"ast":null,"code":"import _classCallCheck from \"/Users/ahmedgadir/Downloads/aggrid-sandpit-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ahmedgadir/Downloads/aggrid-sandpit-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ahmedgadir/Downloads/aggrid-sandpit-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ahmedgadir/Downloads/aggrid-sandpit-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ahmedgadir/Downloads/aggrid-sandpit-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ahmedgadir/Downloads/aggrid-sandpit-master/src/Grid.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nvar Grid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Grid, _Component);\n\n  function Grid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Grid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onRowDataUpdated = function (params) {// console.log('rowDataUpdated', 'loading: ' + this.props.loading, 'error: ' + this.props.error)\n      // if (this.props.loading) {\n      //     this.gridApi.showLoadingOverlay();\n      // } else if (this.props.error) {\n      //     this.gridApi.showNoRowsOverlay();\n      // }\n    };\n\n    _this.onGridReady = function (params) {\n      _this.gridApi = params.api;\n      _this.columnApi = params.columnApi;\n    };\n\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      // cWRP receives the new rowData just moment before the grid does,\n      // so whatever happens here is quickly overrun when the grid actually processes the new data\n      // the better thing to do is to hook up what you would like to the grids callbacks e.g. onRowDataUpdated\n      // also you should use deltaRowDataMode so that the grids api is bound to state.rows in Host.j\n      console.log('rowDataUpdated', 'loading: ' + this.props.loading, 'error: ' + this.props.error);\n\n      if (this.props.loading) {\n        this.gridApi.showLoadingOverlay();\n      } else if (this.props.error) {\n        this.gridApi.showNoRowsOverlay();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          rows = _this$props.rows,\n          columns = _this$props.columns;\n      return React.createElement(\"div\", {\n        className: \"grid-container\",\n        style: {\n          display: 'flex',\n          width: '100%',\n          height: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ag-theme-balham\",\n        style: {\n          height: '800px',\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(AgGridReact, {\n        suppressAggFuncInHeader: true,\n        columnDefs: columns,\n        onGridReady: function onGridReady(params) {\n          return _this2.onGridReady(params);\n        },\n        rowData: rows,\n        enableSorting: true,\n        enableFilter: true,\n        animateRows: true,\n        enableColResize: true,\n        suppressCellSelection: true,\n        rowSelection: \"single\",\n        deltaRowDataMode: true,\n        getRowNodeId: function getRowNodeId(data) {\n          return data.orgName;\n        },\n        onRowDataUpdated: this.onRowDataUpdated,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Grid;\n}(Component);\n\nGrid.propTypes = {\n  rows: PropTypes.array,\n  columns: PropTypes.array,\n  loading: PropTypes.bool,\n  error: PropTypes.object\n};\nGrid.defaultProps = {\n  rows: [],\n  columns: []\n};\nexport { Grid as default };","map":{"version":3,"sources":["/Users/ahmedgadir/Downloads/aggrid-sandpit-master/src/Grid.js"],"names":["React","Component","PropTypes","AgGridReact","Grid","onRowDataUpdated","params","onGridReady","gridApi","api","columnApi","nextProps","nextContext","console","log","props","loading","error","showLoadingOverlay","showNoRowsOverlay","rows","columns","display","width","height","data","orgName","propTypes","array","bool","object","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,2CAAP;AACA,OAAO,mDAAP;;IAEqBC,I;;;;;;;;;;;;;;;;;;UA+BjBC,gB,GAAmB,UAAAC,MAAM,EAAI,CACzB;AAEA;AACA;AACA;AACA;AACA;AACH,K;;UAEDC,W,GAAc,UAACD,MAAD,EAAY;AACtB,YAAKE,OAAL,GAAeF,MAAM,CAACG,GAAtB;AACA,YAAKC,SAAL,GAAiBJ,MAAM,CAACI,SAAxB;AACH,K;;;;;;;8CA5ByBC,S,EAAWC,W,EAAa;AAC9C;AACA;AACA;AAEA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B,cAAc,KAAKC,KAAL,CAAWC,OAAvD,EAAgE,YAAY,KAAKD,KAAL,CAAWE,KAAvF;;AAEA,UAAI,KAAKF,KAAL,CAAWC,OAAf,EAAwB;AACpB,aAAKR,OAAL,CAAaU,kBAAb;AACH,OAFD,MAEO,IAAI,KAAKH,KAAL,CAAWE,KAAf,EAAsB;AACzB,aAAKT,OAAL,CAAaW,iBAAb;AACH;AACJ;;;6BAiBQ;AAAA;;AAAA,wBAEqB,KAAKJ,KAF1B;AAAA,UAEGK,IAFH,eAEGA,IAFH;AAAA,UAESC,OAFT,eAESA,OAFT;AAIL,aACI;AACI,QAAA,SAAS,EAAC,gBADd;AAEI,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,KAAK,EAAE,MAA1B;AAAkCC,UAAAA,MAAM,EAAE;AAA1C,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII;AACI,QAAA,SAAS,EAAC,iBADd;AAEI,QAAA,KAAK,EAAE;AAAEA,UAAAA,MAAM,EAAE,OAAV;AAAmBD,UAAAA,KAAK,EAAE;AAA1B,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII,oBAAC,WAAD;AACI,QAAA,uBAAuB,EAAE,IAD7B;AAEI,QAAA,UAAU,EAAEF,OAFhB;AAGI,QAAA,WAAW,EAAE,qBAACf,MAAD;AAAA,iBAAY,MAAI,CAACC,WAAL,CAAiBD,MAAjB,CAAZ;AAAA,SAHjB;AAII,QAAA,OAAO,EAAEc,IAJb;AAKI,QAAA,aAAa,EAAE,IALnB;AAMI,QAAA,YAAY,EAAE,IANlB;AAOI,QAAA,WAAW,EAAE,IAPjB;AAQI,QAAA,eAAe,EAAE,IARrB;AASI,QAAA,qBAAqB,EAAE,IAT3B;AAUI,QAAA,YAAY,EAAC,QAVjB;AAWI,QAAA,gBAAgB,MAXpB;AAYI,QAAA,YAAY,EAAE,sBAAAK,IAAI;AAAA,iBAAIA,IAAI,CAACC,OAAT;AAAA,SAZtB;AAaI,QAAA,gBAAgB,EAAE,KAAKrB,gBAb3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CAJJ,CADJ;AA2BH;;;;EA7E6BJ,S;;AAAbG,I,CAEVuB,S,GAAY;AACfP,EAAAA,IAAI,EAAElB,SAAS,CAAC0B,KADD;AAEfP,EAAAA,OAAO,EAAEnB,SAAS,CAAC0B,KAFJ;AAIfZ,EAAAA,OAAO,EAAEd,SAAS,CAAC2B,IAJJ;AAKfZ,EAAAA,KAAK,EAAEf,SAAS,CAAC4B;AALF,C;AAFF1B,I,CAWV2B,Y,GAAe;AAClBX,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,OAAO,EAAE;AAFS,C;SAXLjB,I","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nexport default class Grid extends Component {\n\n    static propTypes = {\n        rows: PropTypes.array,\n        columns: PropTypes.array,\n\n        loading: PropTypes.bool,\n        error: PropTypes.object\n\n    };\n\n    static defaultProps = {\n        rows: [],\n        columns: []\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        // cWRP receives the new rowData just moment before the grid does,\n        // so whatever happens here is quickly overrun when the grid actually processes the new data\n        // the better thing to do is to hook up what you would like to the grids callbacks e.g. onRowDataUpdated\n\n        // also you should use deltaRowDataMode so that the grids api is bound to state.rows in Host.j\n        console.log('rowDataUpdated', 'loading: ' + this.props.loading, 'error: ' + this.props.error)\n\n        if (this.props.loading) {\n            this.gridApi.showLoadingOverlay();\n        } else if (this.props.error) {\n            this.gridApi.showNoRowsOverlay();\n        }\n    }\n\n    onRowDataUpdated = params => {\n        // console.log('rowDataUpdated', 'loading: ' + this.props.loading, 'error: ' + this.props.error)\n\n        // if (this.props.loading) {\n        //     this.gridApi.showLoadingOverlay();\n        // } else if (this.props.error) {\n        //     this.gridApi.showNoRowsOverlay();\n        // }\n    };\n\n    onGridReady = (params) => {\n        this.gridApi = params.api;\n        this.columnApi = params.columnApi;\n    };\n\n    render() {\n\n        const { rows, columns } = this.props;\n\n        return (\n            <div\n                className='grid-container'\n                style={{ display: 'flex', width: '100%', height: '100%' }}\n            >\n                <div\n                    className='ag-theme-balham'\n                    style={{ height: '800px', width: '100%' }}\n                >\n                    <AgGridReact\n                        suppressAggFuncInHeader={true}\n                        columnDefs={columns}\n                        onGridReady={(params) => this.onGridReady(params)}\n                        rowData={rows}\n                        enableSorting={true}\n                        enableFilter={true}\n                        animateRows={true}\n                        enableColResize={true}\n                        suppressCellSelection={true}\n                        rowSelection=\"single\"\n                        deltaRowDataMode\n                        getRowNodeId={data => data.orgName}\n                        onRowDataUpdated={this.onRowDataUpdated}\n                    />\n                </div>\n            </div>)\n            ;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
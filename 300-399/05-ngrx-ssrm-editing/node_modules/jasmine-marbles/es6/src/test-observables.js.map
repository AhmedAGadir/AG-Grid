{"version":3,"file":"test-observables.js","sourceRoot":"","sources":["../../../src/test-observables.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAGlC,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,qCAAqC,CAAC;AACpE,OAAO,EAAE,cAAc,EAAE,MAAM,sCAAsC,CAAC;AAEtE,MAAM,yBAA0B,SAAQ,UAAe;IACrD,YACS,OAAe,EACf,MAAc,EACd,KAAW;QAElB,KAAK,EAAE,CAAC;QAJD,YAAO,GAAP,OAAO,CAAQ;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAM;QAIlB,MAAM,SAAS,GAAG,gBAAgB,EAAE,CAAC;QAErC,MAAM,QAAQ,GAAG,aAAa,CAAC,YAAY,CACzC,OAAO,EACP,MAAM,EACN,KAAK,EACL,SAAS,EACT,IAAI,CACL,CAAC;QACF,MAAM,IAAI,GAAG,IAAI,cAAc,CAAM,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC1D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,gBAAgB;QACd,OAAQ,IAAI,CAAC,MAAc,CAAC,eAAe,CAAC,CAAC;IAC/C,CAAC;CACF;AAED,MAAM,wBAAyB,SAAQ,UAAe;IACpD,YACS,OAAe,EACf,MAAc,EACd,KAAW;QAElB,KAAK,EAAE,CAAC;QAJD,YAAO,GAAP,OAAO,CAAQ;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAM;QAIlB,MAAM,SAAS,GAAG,gBAAgB,EAAE,CAAC;QAErC,MAAM,QAAQ,GAAG,aAAa,CAAC,YAAY,CACzC,OAAO,EACP,MAAM,EACN,KAAK,EACL,SAAS,EACT,IAAI,CACL,CAAC;QACF,MAAM,GAAG,GAAG,IAAI,aAAa,CAAM,QAAQ,EAAE,SAAS,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAClB,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,gBAAgB;QACd,OAAQ,IAAI,CAAC,MAAc,CAAC,eAAe,CAAC,CAAC;IAC/C,CAAC;CACF","sourcesContent":["import { Observable } from 'rxjs';\nimport { SubscriptionLog } from 'rxjs/internal/testing/SubscriptionLog';\n\nimport { getTestScheduler } from './scheduler';\nimport { TestScheduler } from 'rxjs/testing';\nimport { HotObservable } from 'rxjs/internal/testing/HotObservable';\nimport { ColdObservable } from 'rxjs/internal/testing/ColdObservable';\n\nexport class TestColdObservable extends Observable<any> {\n  constructor(\n    public marbles: string,\n    public values?: any[],\n    public error?: any,\n  ) {\n    super();\n\n    const scheduler = getTestScheduler();\n\n    const messages = TestScheduler.parseMarbles(\n      marbles,\n      values,\n      error,\n      undefined,\n      true,\n    );\n    const cold = new ColdObservable<any>(messages, scheduler);\n    this.source = cold;\n    scheduler.coldObservables.push(cold);\n  }\n\n  getSubscriptions(): SubscriptionLog[] {\n    return (this.source as any)['subscriptions'];\n  }\n}\n\nexport class TestHotObservable extends Observable<any> {\n  constructor(\n    public marbles: string,\n    public values?: any[],\n    public error?: any,\n  ) {\n    super();\n\n    const scheduler = getTestScheduler();\n\n    const messages = TestScheduler.parseMarbles(\n      marbles,\n      values,\n      error,\n      undefined,\n      true,\n    );\n    const hot = new HotObservable<any>(messages, scheduler);\n    this.source = hot;\n    scheduler.hotObservables.push(hot);\n  }\n\n  getSubscriptions(): SubscriptionLog[] {\n    return (this.source as any)['subscriptions'];\n  }\n}\n\nexport type TestObservable = TestColdObservable | TestHotObservable;\n"]}
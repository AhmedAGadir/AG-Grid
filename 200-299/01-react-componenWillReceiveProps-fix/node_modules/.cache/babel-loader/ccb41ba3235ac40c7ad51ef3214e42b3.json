{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\n\nvar columnApi_1 = require(\"./columnController/columnApi\");\n\nvar columnController_1 = require(\"./columnController/columnController\");\n\nvar rowRenderer_1 = require(\"./rendering/rowRenderer\");\n\nvar filterManager_1 = require(\"./filter/filterManager\");\n\nvar eventService_1 = require(\"./eventService\");\n\nvar gridPanel_1 = require(\"./gridPanel/gridPanel\");\n\nvar logger_1 = require(\"./logger\");\n\nvar popupService_1 = require(\"./widgets/popupService\");\n\nvar utils_1 = require(\"./utils\");\n\nvar context_1 = require(\"./context/context\");\n\nvar focusedCellController_1 = require(\"./focusedCellController\");\n\nvar component_1 = require(\"./widgets/component\");\n\nvar gridApi_1 = require(\"./gridApi\");\n\nvar componentAnnotations_1 = require(\"./widgets/componentAnnotations\");\n\nvar events_1 = require(\"./events\");\n\nvar resizeObserverService_1 = require(\"./misc/resizeObserverService\");\n\nvar sideBar_1 = require(\"./entities/sideBar\");\n\nvar GridCore =\n/** @class */\nfunction (_super) {\n  __extends(GridCore, _super);\n\n  function GridCore() {\n    return _super.call(this) || this;\n  }\n\n  GridCore_1 = GridCore;\n\n  GridCore.prototype.init = function () {\n    var _this = this;\n\n    this.logger = this.loggerFactory.create('GridCore');\n    var template = this.enterprise ? GridCore_1.TEMPLATE_ENTERPRISE : GridCore_1.TEMPLATE_NORMAL;\n    this.setTemplate(template);\n    this.instantiate(this.context);\n\n    if (this.enterprise) {\n      this.sideBarComp.registerGridComp(this.gridPanel);\n    }\n\n    this.gridOptionsWrapper.addLayoutElement(this.getGui()); // see what the grid options are for default of toolbar\n\n    this.setSideBarVisible(this.gridOptionsWrapper.isShowToolPanel());\n    this.eGridDiv.appendChild(this.getGui());\n    this.addDestroyFunc(function () {\n      _this.eGridDiv.removeChild(_this.getGui());\n    }); // if using angular, watch for quickFilter changes\n\n    if (this.$scope) {\n      var quickFilterUnregisterFn = this.$scope.$watch(this.quickFilterOnScope, function (newFilter) {\n        return _this.filterManager.setQuickFilter(newFilter);\n      });\n      this.addDestroyFunc(quickFilterUnregisterFn);\n    } // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,\n    // which doLayout indirectly depends on\n\n\n    this.addRtlSupport();\n    this.finished = false;\n    this.addDestroyFunc(function () {\n      return _this.finished = true;\n    });\n    this.logger.log('ready');\n    this.gridOptionsWrapper.addLayoutElement(this.eRootWrapperBody);\n    var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridDiv, this.onGridSizeChanged.bind(this));\n    this.addDestroyFunc(function () {\n      return unsubscribeFromResize();\n    });\n  };\n\n  GridCore.prototype.onGridSizeChanged = function () {\n    var event = {\n      type: events_1.Events.EVENT_GRID_SIZE_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      clientWidth: this.eGridDiv.clientWidth,\n      clientHeight: this.eGridDiv.clientHeight\n    };\n    this.eventService.dispatchEvent(event);\n  }; // this was deprecated in v19, we can drop in v20\n\n\n  GridCore.prototype.getPreferredWidth = function () {\n    var widthForCols = this.columnController.getBodyContainerWidth() + this.columnController.getPinnedLeftContainerWidth() + this.columnController.getPinnedRightContainerWidth();\n    var widthForToolpanel = this.sideBarComp ? this.sideBarComp.getPreferredWidth() : 0;\n    return widthForCols + widthForToolpanel;\n  };\n\n  GridCore.prototype.addRtlSupport = function () {\n    var cssClass = this.gridOptionsWrapper.isEnableRtl() ? 'ag-rtl' : 'ag-ltr';\n    utils_1.Utils.addCssClass(this.getGui(), cssClass);\n  };\n\n  GridCore.prototype.getRootGui = function () {\n    return this.getGui();\n  };\n\n  GridCore.prototype.isSideBarVisible = function () {\n    if (!this.sideBarComp) {\n      return false;\n    }\n\n    return this.sideBarComp.isVisible();\n  };\n\n  GridCore.prototype.setSideBarVisible = function (show) {\n    if (!this.sideBarComp) {\n      if (show) {\n        console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');\n      }\n\n      return;\n    }\n\n    this.sideBarComp.setVisible(show);\n  };\n\n  GridCore.prototype.closeToolPanel = function () {\n    if (!this.sideBarComp) {\n      console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');\n      return;\n    }\n\n    this.sideBarComp.close();\n  };\n\n  GridCore.prototype.getSideBar = function () {\n    return this.gridOptions.sideBar;\n  };\n\n  GridCore.prototype.setSideBar = function (def) {\n    this.eRootWrapperBody.removeChild(this.sideBarComp.getGui());\n    this.gridOptions.sideBar = sideBar_1.SideBarDefParser.parse(def);\n    this.sideBarComp.reset();\n    this.eRootWrapperBody.appendChild(this.sideBarComp.getGui());\n  };\n\n  GridCore.prototype.getOpenedToolPanel = function () {\n    if (!this.sideBarComp) {\n      return null;\n    }\n\n    return this.sideBarComp.openedItem();\n  };\n\n  GridCore.prototype.openToolPanel = function (key) {\n    if (!this.sideBarComp) {\n      console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');\n      return;\n    }\n\n    this.sideBarComp.openToolPanel(key);\n  };\n\n  GridCore.prototype.isToolPanelShowing = function () {\n    return this.sideBarComp.isToolPanelShowing();\n  }; // need to override, as parent class isn't marked with PreDestroy\n\n\n  GridCore.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.logger.log('Grid DOM removed');\n  }; // Valid values for position are bottom, middle and top\n\n\n  GridCore.prototype.ensureNodeVisible = function (comparator, position) {\n    if (position === void 0) {\n      position = 'top';\n    }\n\n    if (this.doingVirtualPaging) {\n      throw new Error('Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory');\n    } // look for the node index we want to display\n\n\n    var rowCount = this.rowModel.getPageLastRow() + 1;\n    var comparatorIsAFunction = typeof comparator === 'function';\n    var indexToSelect = -1; // go through all the nodes, find the one we want to show\n\n    for (var i = 0; i < rowCount; i++) {\n      var node = this.rowModel.getRow(i);\n\n      if (comparatorIsAFunction) {\n        if (comparator(node)) {\n          indexToSelect = i;\n          break;\n        }\n      } else {\n        // check object equality against node and data\n        if (comparator === node || comparator === node.data) {\n          indexToSelect = i;\n          break;\n        }\n      }\n    }\n\n    if (indexToSelect >= 0) {\n      this.gridPanel.ensureIndexVisible(indexToSelect, position);\n    }\n  };\n\n  var GridCore_1;\n  GridCore.TEMPLATE_NORMAL = \"<div class=\\\"ag-root-wrapper\\\">\\n            <div class=\\\"ag-root-wrapper-body\\\" ref=\\\"rootWrapperBody\\\">\\n                <ag-grid-comp ref=\\\"gridPanel\\\"></ag-grid-comp>\\n            </div>\\n            <ag-pagination></ag-pagination>\\n        </div>\";\n  GridCore.TEMPLATE_ENTERPRISE = \"<div class=\\\"ag-root-wrapper\\\">\\n            <ag-grid-header-drop-zones></ag-grid-header-drop-zones>\\n            <div ref=\\\"rootWrapperBody\\\" class=\\\"ag-root-wrapper-body\\\">\\n                <ag-grid-comp ref=\\\"gridPanel\\\"></ag-grid-comp>\\n                <ag-side-bar ref=\\\"sideBar\\\"></ag-side-bar>\\n            </div>\\n            <ag-status-bar ref=\\\"statusBar\\\"></ag-status-bar>\\n            <ag-pagination></ag-pagination>\\n        </div>\";\n\n  __decorate([context_1.Autowired('enterprise'), __metadata(\"design:type\", Boolean)], GridCore.prototype, \"enterprise\", void 0);\n\n  __decorate([context_1.Autowired('gridOptions'), __metadata(\"design:type\", Object)], GridCore.prototype, \"gridOptions\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], GridCore.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], GridCore.prototype, \"rowModel\", void 0);\n\n  __decorate([context_1.Autowired('frameworkFactory'), __metadata(\"design:type\", Object)], GridCore.prototype, \"frameworkFactory\", void 0);\n\n  __decorate([context_1.Autowired('resizeObserverService'), __metadata(\"design:type\", resizeObserverService_1.ResizeObserverService)], GridCore.prototype, \"resizeObserverService\", void 0);\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], GridCore.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('rowRenderer'), __metadata(\"design:type\", rowRenderer_1.RowRenderer)], GridCore.prototype, \"rowRenderer\", void 0);\n\n  __decorate([context_1.Autowired('filterManager'), __metadata(\"design:type\", filterManager_1.FilterManager)], GridCore.prototype, \"filterManager\", void 0);\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], GridCore.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.Autowired('eGridDiv'), __metadata(\"design:type\", HTMLElement)], GridCore.prototype, \"eGridDiv\", void 0);\n\n  __decorate([context_1.Autowired('$scope'), __metadata(\"design:type\", Object)], GridCore.prototype, \"$scope\", void 0);\n\n  __decorate([context_1.Autowired('quickFilterOnScope'), __metadata(\"design:type\", String)], GridCore.prototype, \"quickFilterOnScope\", void 0);\n\n  __decorate([context_1.Autowired('popupService'), __metadata(\"design:type\", popupService_1.PopupService)], GridCore.prototype, \"popupService\", void 0);\n\n  __decorate([context_1.Autowired('focusedCellController'), __metadata(\"design:type\", focusedCellController_1.FocusedCellController)], GridCore.prototype, \"focusedCellController\", void 0);\n\n  __decorate([context_1.Autowired('context'), __metadata(\"design:type\", context_1.Context)], GridCore.prototype, \"context\", void 0);\n\n  __decorate([context_1.Autowired('loggerFactory'), __metadata(\"design:type\", logger_1.LoggerFactory)], GridCore.prototype, \"loggerFactory\", void 0);\n\n  __decorate([context_1.Autowired('columnApi'), __metadata(\"design:type\", columnApi_1.ColumnApi)], GridCore.prototype, \"columnApi\", void 0);\n\n  __decorate([context_1.Autowired('gridApi'), __metadata(\"design:type\", gridApi_1.GridApi)], GridCore.prototype, \"gridApi\", void 0);\n\n  __decorate([context_1.Optional('rowGroupCompFactory'), __metadata(\"design:type\", Object)], GridCore.prototype, \"rowGroupCompFactory\", void 0);\n\n  __decorate([context_1.Optional('pivotCompFactory'), __metadata(\"design:type\", Object)], GridCore.prototype, \"pivotCompFactory\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('gridPanel'), __metadata(\"design:type\", gridPanel_1.GridPanel)], GridCore.prototype, \"gridPanel\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('sideBar'), __metadata(\"design:type\", Object)], GridCore.prototype, \"sideBarComp\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('rootWrapperBody'), __metadata(\"design:type\", HTMLElement)], GridCore.prototype, \"eRootWrapperBody\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GridCore.prototype, \"init\", null);\n\n  __decorate([context_1.PreDestroy, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GridCore.prototype, \"destroy\", null);\n\n  GridCore = GridCore_1 = __decorate([context_1.Bean('gridCore'), __metadata(\"design:paramtypes\", [])], GridCore);\n  return GridCore;\n}(component_1.Component);\n\nexports.GridCore = GridCore;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar beanStub_1 = require(\"../context/beanStub\");\n\nvar eventService_1 = require(\"../eventService\");\n\nvar events_1 = require(\"../events\");\n\nvar utils_1 = require(\"../utils\");\n\nvar context_1 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar scrollVisibleService_1 = require(\"../gridPanel/scrollVisibleService\");\n\nvar selectionController_1 = require(\"../selectionController\");\n\nvar columnApi_1 = require(\"../columnController/columnApi\");\n\nvar gridApi_1 = require(\"../gridApi\");\n\nvar PaginationAutoPageSizeService =\n/** @class */\nfunction (_super) {\n  __extends(PaginationAutoPageSizeService, _super);\n\n  function PaginationAutoPageSizeService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PaginationAutoPageSizeService.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));\n    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n    this.checkPageSize();\n  };\n\n  PaginationAutoPageSizeService.prototype.notActive = function () {\n    return !this.gridOptionsWrapper.isPaginationAutoPageSize();\n  };\n\n  PaginationAutoPageSizeService.prototype.onScrollVisibilityChanged = function () {\n    this.checkPageSize();\n  };\n\n  PaginationAutoPageSizeService.prototype.onBodyHeightChanged = function () {\n    this.checkPageSize();\n  };\n\n  PaginationAutoPageSizeService.prototype.checkPageSize = function () {\n    if (this.notActive()) {\n      return;\n    }\n\n    var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n    var bodyHeight = this.gridPanel.getBodyHeight();\n\n    if (this.scrollVisibleService.isBodyHorizontalScrollShowing()) {\n      bodyHeight = bodyHeight - this.gridOptionsWrapper.getScrollbarWidth();\n    }\n\n    if (bodyHeight > 0) {\n      var newPageSize = Math.floor(bodyHeight / rowHeight);\n      this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);\n    }\n  };\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], PaginationAutoPageSizeService.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], PaginationAutoPageSizeService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('scrollVisibleService'), __metadata(\"design:type\", scrollVisibleService_1.ScrollVisibleService)], PaginationAutoPageSizeService.prototype, \"scrollVisibleService\", void 0);\n\n  PaginationAutoPageSizeService = __decorate([context_1.Bean('paginationAutoPageSizeService')], PaginationAutoPageSizeService);\n  return PaginationAutoPageSizeService;\n}(beanStub_1.BeanStub);\n\nexports.PaginationAutoPageSizeService = PaginationAutoPageSizeService;\n\nvar PaginationProxy =\n/** @class */\nfunction (_super) {\n  __extends(PaginationProxy, _super);\n\n  function PaginationProxy() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.currentPage = 0;\n    _this.topRowIndex = 0;\n    _this.bottomRowIndex = 0;\n    _this.pixelOffset = 0;\n    return _this;\n  }\n\n  PaginationProxy.prototype.postConstruct = function () {\n    this.active = this.gridOptionsWrapper.isPagination();\n    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n    this.addDestroyableEventListener(this.gridOptionsWrapper, 'paginationPageSize', this.onModelUpdated.bind(this));\n    this.onModelUpdated();\n  };\n\n  PaginationProxy.prototype.isLastRowFound = function () {\n    return this.rowModel.isLastRowFound();\n  };\n\n  PaginationProxy.prototype.onModelUpdated = function (modelUpdatedEvent) {\n    this.setIndexesAndBounds();\n    var paginationChangedEvent = {\n      type: events_1.Events.EVENT_PAGINATION_CHANGED,\n      animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,\n      newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,\n      newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,\n      keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.eventService.dispatchEvent(paginationChangedEvent);\n  };\n\n  PaginationProxy.prototype.goToPage = function (page) {\n    if (!this.active) {\n      return;\n    }\n\n    if (this.currentPage === page) {\n      return;\n    }\n\n    this.currentPage = page;\n    var event = {\n      type: events_1.Events.EVENT_MODEL_UPDATED,\n      animate: false,\n      keepRenderedRows: false,\n      newData: false,\n      newPage: true,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.onModelUpdated(event);\n  };\n\n  PaginationProxy.prototype.getPixelOffset = function () {\n    return this.pixelOffset;\n  };\n\n  PaginationProxy.prototype.getRow = function (index) {\n    return this.rowModel.getRow(index);\n  };\n\n  PaginationProxy.prototype.getRowNode = function (id) {\n    return this.rowModel.getRowNode(id);\n  };\n\n  PaginationProxy.prototype.getRowIndexAtPixel = function (pixel) {\n    return this.rowModel.getRowIndexAtPixel(pixel);\n  };\n\n  PaginationProxy.prototype.getCurrentPageHeight = function () {\n    if (utils_1._.missing(this.topRowBounds) || utils_1._.missing(this.bottomRowBounds)) {\n      return 0;\n    }\n\n    return this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop;\n  };\n\n  PaginationProxy.prototype.isRowPresent = function (rowNode) {\n    if (!this.rowModel.isRowPresent(rowNode)) {\n      return false;\n    }\n\n    var nodeIsInPage = rowNode.rowIndex >= this.topRowIndex && rowNode.rowIndex <= this.bottomRowIndex;\n    return nodeIsInPage;\n  };\n\n  PaginationProxy.prototype.isEmpty = function () {\n    return this.rowModel.isEmpty();\n  };\n\n  PaginationProxy.prototype.isRowsToRender = function () {\n    return this.rowModel.isRowsToRender();\n  };\n\n  PaginationProxy.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n    return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);\n  };\n\n  PaginationProxy.prototype.forEachNode = function (callback) {\n    return this.rowModel.forEachNode(callback);\n  };\n\n  PaginationProxy.prototype.getType = function () {\n    return this.rowModel.getType();\n  };\n\n  PaginationProxy.prototype.getRowBounds = function (index) {\n    return this.rowModel.getRowBounds(index);\n  };\n\n  PaginationProxy.prototype.getPageFirstRow = function () {\n    return this.pageSize * this.currentPage;\n  };\n\n  PaginationProxy.prototype.getPageLastRow = function () {\n    var totalLastRow = this.pageSize * (this.currentPage + 1) - 1;\n    var pageLastRow = this.rowModel.getPageLastRow();\n\n    if (pageLastRow > totalLastRow) {\n      return totalLastRow;\n    } else {\n      return pageLastRow;\n    }\n  };\n\n  PaginationProxy.prototype.getRowCount = function () {\n    return this.rowModel.getRowCount();\n  };\n\n  PaginationProxy.prototype.goToPageWithIndex = function (index) {\n    if (!this.active) {\n      return;\n    }\n\n    var pageNumber = Math.floor(index / this.pageSize);\n    this.goToPage(pageNumber);\n  };\n\n  PaginationProxy.prototype.getTotalRowCount = function () {\n    return this.rowModel.getPageLastRow() + 1;\n  };\n\n  PaginationProxy.prototype.isLastPageFound = function () {\n    return this.rowModel.isLastRowFound();\n  };\n\n  PaginationProxy.prototype.getCurrentPage = function () {\n    return this.currentPage;\n  };\n\n  PaginationProxy.prototype.goToNextPage = function () {\n    this.goToPage(this.currentPage + 1);\n  };\n\n  PaginationProxy.prototype.goToPreviousPage = function () {\n    this.goToPage(this.currentPage - 1);\n  };\n\n  PaginationProxy.prototype.goToFirstPage = function () {\n    this.goToPage(0);\n  };\n\n  PaginationProxy.prototype.goToLastPage = function () {\n    var rowCount = this.rowModel.getPageLastRow() + 1;\n    var lastPage = Math.floor(rowCount / this.pageSize);\n    this.goToPage(lastPage);\n  };\n\n  PaginationProxy.prototype.getPageSize = function () {\n    return this.pageSize;\n  };\n\n  PaginationProxy.prototype.getTotalPages = function () {\n    return this.totalPages;\n  };\n\n  PaginationProxy.prototype.setPageSize = function () {\n    // show put this into super class\n    this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();\n\n    if (!(this.pageSize >= 1)) {\n      this.pageSize = 100;\n    }\n  };\n\n  PaginationProxy.prototype.setIndexesAndBounds = function () {\n    if (this.active) {\n      this.setPageSize();\n      var totalRowCount = this.getTotalRowCount();\n      this.totalPages = Math.floor((totalRowCount - 1) / this.pageSize) + 1;\n\n      if (this.currentPage >= this.totalPages) {\n        this.currentPage = this.totalPages - 1;\n      }\n\n      if (!utils_1._.isNumeric(this.currentPage) || this.currentPage < 0) {\n        this.currentPage = 0;\n      }\n\n      this.topRowIndex = this.pageSize * this.currentPage;\n      this.bottomRowIndex = this.pageSize * (this.currentPage + 1) - 1;\n      var maxRowAllowed = this.rowModel.getPageLastRow();\n\n      if (this.bottomRowIndex > maxRowAllowed) {\n        this.bottomRowIndex = maxRowAllowed;\n      }\n    } else {\n      this.pageSize = this.rowModel.getPageLastRow() + 1;\n      this.totalPages = 1;\n      this.currentPage = 0;\n      this.topRowIndex = 0;\n      this.bottomRowIndex = this.rowModel.getPageLastRow();\n    }\n\n    this.topRowBounds = this.rowModel.getRowBounds(this.topRowIndex);\n    this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomRowIndex);\n    this.pixelOffset = utils_1._.exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0;\n  };\n\n  __decorate([context_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], PaginationProxy.prototype, \"rowModel\", void 0);\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], PaginationProxy.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], PaginationProxy.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('selectionController'), __metadata(\"design:type\", selectionController_1.SelectionController)], PaginationProxy.prototype, \"selectionController\", void 0);\n\n  __decorate([context_1.Autowired('columnApi'), __metadata(\"design:type\", columnApi_1.ColumnApi)], PaginationProxy.prototype, \"columnApi\", void 0);\n\n  __decorate([context_1.Autowired('gridApi'), __metadata(\"design:type\", gridApi_1.GridApi)], PaginationProxy.prototype, \"gridApi\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], PaginationProxy.prototype, \"postConstruct\", null);\n\n  PaginationProxy = __decorate([context_1.Bean('paginationProxy')], PaginationProxy);\n  return PaginationProxy;\n}(beanStub_1.BeanStub);\n\nexports.PaginationProxy = PaginationProxy;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar expressionService_1 = require(\"../valueService/expressionService\");\n\nvar ValueFormatterService =\n/** @class */\nfunction () {\n  function ValueFormatterService() {}\n\n  ValueFormatterService.prototype.formatValue = function (column, rowNode, $scope, value) {\n    var formatter;\n    var colDef = column.getColDef(); // if floating, give preference to the floating formatter\n\n    if (rowNode && rowNode.rowPinned) {\n      formatter = colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;\n    } else {\n      formatter = colDef.valueFormatter;\n    }\n\n    var result = null;\n\n    if (formatter) {\n      var params = {\n        value: value,\n        node: rowNode,\n        data: rowNode ? rowNode.data : null,\n        colDef: column.getColDef(),\n        column: column,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      }; // originally we put the angular 1 scope here, but we don't want the scope\n      // in the params interface, as other frameworks will see the interface, and\n      // angular 1 is not cool any more. so we hack the scope in here (we cannot\n      // include it above, as it's not in the interface, so would cause a compile error).\n      // in the future, when we stop supporting angular 1, we can take this out.\n\n      params.$scope = $scope;\n      result = this.expressionService.evaluate(formatter, params);\n    } else if (colDef.refData) {\n      return colDef.refData[value];\n    } // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (ie with spaces)\n\n\n    if ((result === null || result === undefined) && Array.isArray(value)) {\n      result = value.join(', ');\n    }\n\n    return result;\n  };\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], ValueFormatterService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('expressionService'), __metadata(\"design:type\", expressionService_1.ExpressionService)], ValueFormatterService.prototype, \"expressionService\", void 0);\n\n  ValueFormatterService = __decorate([context_1.Bean('valueFormatterService')], ValueFormatterService);\n  return ValueFormatterService;\n}();\n\nexports.ValueFormatterService = ValueFormatterService;","map":null,"metadata":{},"sourceType":"script"}
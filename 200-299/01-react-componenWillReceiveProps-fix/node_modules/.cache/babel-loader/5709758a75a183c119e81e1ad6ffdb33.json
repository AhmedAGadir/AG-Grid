{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"./context/context\");\n\nvar context_2 = require(\"./context/context\");\n\nvar TemplateService =\n/** @class */\nfunction () {\n  function TemplateService() {\n    this.templateCache = {};\n    this.waitingCallbacks = {};\n  } // returns the template if it is loaded, or null if it is not loaded\n  // but will call the callback when it is loaded\n\n\n  TemplateService.prototype.getTemplate = function (url, callback) {\n    var templateFromCache = this.templateCache[url];\n\n    if (templateFromCache) {\n      return templateFromCache;\n    }\n\n    var callbackList = this.waitingCallbacks[url];\n    var that = this;\n\n    if (!callbackList) {\n      // first time this was called, so need a new list for callbacks\n      callbackList = [];\n      this.waitingCallbacks[url] = callbackList; // and also need to do the http request\n\n      var client = new XMLHttpRequest();\n\n      client.onload = function () {\n        that.handleHttpResult(this, url);\n      };\n\n      client.open(\"GET\", url);\n      client.send();\n    } // add this callback\n\n\n    if (callback) {\n      callbackList.push(callback);\n    } // caller needs to wait for template to load, so return null\n\n\n    return null;\n  };\n\n  TemplateService.prototype.handleHttpResult = function (httpResult, url) {\n    if (httpResult.status !== 200 || httpResult.response === null) {\n      console.warn(\"Unable to get template error \" + httpResult.status + \" - \" + url);\n      return;\n    } // response success, so process it\n    // in IE9 the response is in - responseText\n\n\n    this.templateCache[url] = httpResult.response || httpResult.responseText; // inform all listeners that this is now in the cache\n\n    var callbacks = this.waitingCallbacks[url];\n\n    for (var i = 0; i < callbacks.length; i++) {\n      var callback = callbacks[i]; // we could pass the callback the response, however we know the client of this code\n      // is the cell renderer, and it passes the 'cellRefresh' method in as the callback\n      // which doesn't take any parameters.\n\n      callback();\n    }\n\n    if (this.$scope) {\n      var that_1 = this;\n      setTimeout(function () {\n        that_1.$scope.$apply();\n      }, 0);\n    }\n  };\n\n  __decorate([context_2.Autowired('$scope'), __metadata(\"design:type\", Object)], TemplateService.prototype, \"$scope\", void 0);\n\n  TemplateService = __decorate([context_1.Bean('templateService')], TemplateService);\n  return TemplateService;\n}();\n\nexports.TemplateService = TemplateService;","map":null,"metadata":{},"sourceType":"script"}
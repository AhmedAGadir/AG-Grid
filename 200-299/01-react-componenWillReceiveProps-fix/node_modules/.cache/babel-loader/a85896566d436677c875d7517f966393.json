{"ast":null,"code":"// ag-grid-react v19.1.2\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar AgGrid = require(\"ag-grid-community\");\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar agGridColumn_1 = require(\"./agGridColumn\");\n\nvar agReactComponent_1 = require(\"./agReactComponent\");\n\nvar AgGridReact =\n/** @class */\nfunction (_super) {\n  __extends(AgGridReact, _super);\n\n  function AgGridReact(props, state) {\n    var _this = _super.call(this, props, state) || this;\n\n    _this.props = props;\n    _this.state = state;\n    return _this;\n  }\n\n  AgGridReact.prototype.render = function () {\n    var _this = this;\n\n    return React.createElement(\"div\", {\n      style: this.createStyleForDiv(),\n      ref: function ref(e) {\n        _this.eGridDiv = e;\n      }\n    });\n  };\n\n  AgGridReact.prototype.createStyleForDiv = function () {\n    var style = {\n      height: \"100%\"\n    }; // allow user to override styles\n\n    var containerStyle = this.props.containerStyle;\n\n    if (containerStyle) {\n      Object.keys(containerStyle).forEach(function (key) {\n        style[key] = containerStyle[key];\n      });\n    }\n\n    return style;\n  };\n\n  AgGridReact.prototype.componentDidMount = function () {\n    var gridParams = {\n      seedBeanInstances: {\n        agGridReact: this\n      }\n    };\n    var gridOptions = this.props.gridOptions || {};\n\n    if (agGridColumn_1.AgGridColumn.hasChildColumns(this.props)) {\n      gridOptions.columnDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(this.props);\n    }\n\n    this.gridOptions = AgGrid.ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props); // don't need the return value\n\n    new AgGrid.Grid(this.eGridDiv, this.gridOptions, gridParams);\n    this.api = this.gridOptions.api;\n    this.columnApi = this.gridOptions.columnApi;\n  };\n\n  AgGridReact.prototype.shouldComponentUpdate = function () {\n    // we want full control of the dom, as ag-Grid doesn't use React internally,\n    // so for performance reasons we tell React we don't need render called after\n    // property changes.\n    return false;\n  };\n\n  AgGridReact.prototype.componentWillReceiveProps = function (nextProps) {\n    var _this = this;\n\n    var debugLogging = !!nextProps.debug; // keeping consistent with web components, put changing\n    // values in currentValue and previousValue pairs and\n    // not include items that have not changed.\n\n    var changes = {};\n    AgGrid.ComponentUtil.ALL_PROPERTIES.forEach(function (propKey) {\n      if (!_this.areEquivalent(_this.props[propKey], nextProps[propKey])) {\n        if (debugLogging) {\n          console.log(\"agGridReact: [\" + propKey + \"] property changed\");\n        }\n\n        changes[propKey] = {\n          previousValue: _this.props[propKey],\n          currentValue: nextProps[propKey]\n        };\n      }\n    });\n    AgGrid.ComponentUtil.getEventCallbacks().forEach(function (funcName) {\n      if (_this.props[funcName] !== nextProps[funcName]) {\n        if (debugLogging) {\n          console.log(\"agGridReact: [\" + funcName + \"] event callback changed\");\n        }\n\n        changes[funcName] = {\n          previousValue: _this.props[funcName],\n          currentValue: nextProps[funcName]\n        };\n      }\n    });\n    AgGrid.ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi);\n  };\n\n  AgGridReact.prototype.componentWillUnmount = function () {\n    if (this.api) {\n      this.api.destroy();\n    }\n  };\n  /*\n   * deeper object comparison - taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript\n   */\n\n\n  AgGridReact.unwrapStringOrNumber = function (obj) {\n    return obj instanceof Number || obj instanceof String ? obj.valueOf() : obj;\n  }; // sigh, here for ie compatibility\n\n\n  AgGridReact.prototype.copy = function (value) {\n    if (!value) {\n      return value;\n    }\n\n    if (Array.isArray(value)) {\n      // shallow copy the array - this will typically be either rowData or columnDefs\n      var arrayCopy = [];\n\n      for (var i = 0; i < value.length; i++) {\n        arrayCopy.push(this.copy(value[i]));\n      }\n\n      return arrayCopy;\n    } // for anything without keys (boolean, string etc).\n    // Object.keys - chrome will swallow them, IE will fail (correctly, imho)\n\n\n    if (typeof value !== \"object\") {\n      return value;\n    }\n\n    return [{}, value].reduce(function (r, o) {\n      Object.keys(o).forEach(function (k) {\n        r[k] = o[k];\n      });\n      return r;\n    }, {});\n  };\n\n  AgGridReact.prototype.areEquivalent = function (a, b) {\n    return AgGridReact.areEquivalent(this.copy(a), this.copy(b));\n  };\n  /*\n   * slightly modified, but taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript\n   *\n   * What we're trying to do here is determine if the property being checked has changed in _value_, not just in reference\n   *\n   * For eg, if a user updates the columnDefs via property binding, but the actual columns defs are the same before and\n   * after, then we don't want the grid to re-render\n   */\n\n\n  AgGridReact.areEquivalent = function (a, b) {\n    a = AgGridReact.unwrapStringOrNumber(a);\n    b = AgGridReact.unwrapStringOrNumber(b);\n    if (a === b) return true; //e.g. a and b both null\n\n    if (a === null || b === null || typeof a !== typeof b) return false;\n\n    if (a instanceof Date) {\n      return b instanceof Date && a.valueOf() === b.valueOf();\n    }\n\n    if (typeof a === \"function\") {\n      return a.toString() === b.toString();\n    }\n\n    if (typeof a !== \"object\") {\n      return a == b; //for boolean, number, string, function, xml\n    }\n\n    var newA = a.areEquivPropertyTracking === undefined,\n        newB = b.areEquivPropertyTracking === undefined;\n\n    try {\n      var prop = void 0;\n\n      if (newA) {\n        a.areEquivPropertyTracking = [];\n      } else if (a.areEquivPropertyTracking.some(function (other) {\n        return other === b;\n      })) return true;\n\n      if (newB) {\n        b.areEquivPropertyTracking = [];\n      } else if (b.areEquivPropertyTracking.some(function (other) {\n        return other === a;\n      })) {\n        return true;\n      }\n\n      a.areEquivPropertyTracking.push(b);\n      b.areEquivPropertyTracking.push(a);\n      var tmp = {};\n\n      for (prop in a) {\n        if (prop != \"areEquivPropertyTracking\") {\n          tmp[prop] = null;\n        }\n      }\n\n      for (prop in b) {\n        if (prop != \"areEquivPropertyTracking\") {\n          tmp[prop] = null;\n        }\n      }\n\n      for (prop in tmp) {\n        if (!this.areEquivalent(a[prop], b[prop])) {\n          return false;\n        }\n      }\n\n      return true;\n    } finally {\n      if (newA) delete a.areEquivPropertyTracking;\n      if (newB) delete b.areEquivPropertyTracking;\n    }\n  };\n\n  return AgGridReact;\n}(React.Component);\n\nexports.AgGridReact = AgGridReact;\nAgGridReact.propTypes = {\n  gridOptions: PropTypes.object\n};\naddProperties(AgGrid.ComponentUtil.getEventCallbacks(), PropTypes.func);\naddProperties(AgGrid.ComponentUtil.BOOLEAN_PROPERTIES, PropTypes.bool);\naddProperties(AgGrid.ComponentUtil.STRING_PROPERTIES, PropTypes.string);\naddProperties(AgGrid.ComponentUtil.OBJECT_PROPERTIES, PropTypes.object);\naddProperties(AgGrid.ComponentUtil.ARRAY_PROPERTIES, PropTypes.array);\naddProperties(AgGrid.ComponentUtil.NUMBER_PROPERTIES, PropTypes.number);\naddProperties(AgGrid.ComponentUtil.FUNCTION_PROPERTIES, PropTypes.func);\n\nfunction addProperties(listOfProps, propType) {\n  listOfProps.forEach(function (propKey) {\n    AgGridReact[propKey] = propType;\n  });\n}\n\nvar ReactFrameworkComponentWrapper =\n/** @class */\nfunction (_super) {\n  __extends(ReactFrameworkComponentWrapper, _super);\n\n  function ReactFrameworkComponentWrapper() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ReactFrameworkComponentWrapper.prototype.createWrapper = function (ReactComponent) {\n    var _self = this;\n\n    var DynamicAgReactComponent =\n    /** @class */\n    function (_super) {\n      __extends(DynamicAgReactComponent, _super);\n\n      function DynamicAgReactComponent() {\n        return _super.call(this, ReactComponent, _self.agGridReact) || this;\n      }\n\n      DynamicAgReactComponent.prototype.init = function (params) {\n        return _super.prototype.init.call(this, params);\n      };\n\n      DynamicAgReactComponent.prototype.hasMethod = function (name) {\n        var frameworkComponentInstance = wrapper.getFrameworkComponentInstance();\n\n        if (frameworkComponentInstance == null) {\n          return true;\n        }\n\n        return frameworkComponentInstance[name] != null;\n      };\n\n      DynamicAgReactComponent.prototype.callMethod = function (name, args) {\n        var _this = this;\n\n        var frameworkComponentInstance = this.getFrameworkComponentInstance();\n\n        if (frameworkComponentInstance == null) {\n          setTimeout(function () {\n            return _this.callMethod(name, args);\n          }, 100);\n        } else {\n          var method = wrapper.getFrameworkComponentInstance()[name];\n          if (method == null) return null;\n          return method.apply(frameworkComponentInstance, args);\n        }\n      };\n\n      DynamicAgReactComponent.prototype.addMethod = function (name, callback) {\n        wrapper[name] = callback;\n      };\n\n      return DynamicAgReactComponent;\n    }(agReactComponent_1.AgReactComponent);\n\n    var wrapper = new DynamicAgReactComponent();\n    return wrapper;\n  };\n\n  __decorate([ag_grid_community_1.Autowired(\"agGridReact\"), __metadata(\"design:type\", AgGridReact)], ReactFrameworkComponentWrapper.prototype, \"agGridReact\", void 0);\n\n  ReactFrameworkComponentWrapper = __decorate([ag_grid_community_1.Bean(\"frameworkComponentWrapper\")], ReactFrameworkComponentWrapper);\n  return ReactFrameworkComponentWrapper;\n}(ag_grid_community_1.BaseComponentWrapper);\n\nAgGrid.Grid.setFrameworkBeans([ReactFrameworkComponentWrapper]);","map":null,"metadata":{},"sourceType":"script"}
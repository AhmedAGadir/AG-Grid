{"version":3,"file":"router-store.js","sources":["../../../../../../modules/router-store/src/actions.ts","../../../../../../modules/router-store/src/reducer.ts","../../../../../../modules/router-store/src/serializers/base.ts","../../../../../../modules/router-store/src/serializers/default_serializer.ts","../../../../../../modules/router-store/src/serializers/minimal_serializer.ts","../../../../../../modules/router-store/src/router_store_module.ts","../../../../../../modules/router-store/src/router_selectors.ts","../../../../../../modules/router-store/index.ts","../../../../../../modules/router-store/router-store.ts"],"sourcesContent":["import {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  RoutesRecognized,\n} from '@angular/router';\n\nimport { BaseRouterStoreState } from './serializers/base';\nimport { SerializedRouterStateSnapshot } from './serializers/default_serializer';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nexport const ROUTER_REQUEST = '@ngrx/router-store/request';\n\n/**\n * Payload of ROUTER_REQUEST\n */\nexport type RouterRequestPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: NavigationStart;\n};\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nexport type RouterRequestAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_REQUEST;\n  payload: RouterRequestPayload<T>;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport const ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\n\n/**\n * Payload of ROUTER_NAVIGATION.\n */\nexport type RouterNavigationPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: RoutesRecognized;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport type RouterNavigationAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload<T>;\n};\n\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport const ROUTER_CANCEL = '@ngrx/router-store/cancel';\n\n/**\n * Payload of ROUTER_CANCEL.\n */\nexport type RouterCancelPayload<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationCancel;\n};\n\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport type RouterCancelAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T, V>;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport const ROUTER_ERROR = '@ngrx/router-store/error';\n\n/**\n * Payload of ROUTER_ERROR.\n */\nexport type RouterErrorPayload<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationError;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport type RouterErrorAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T, V>;\n};\n\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nexport const ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\n\n/**\n * Payload of ROUTER_NAVIGATED.\n */\nexport type RouterNavigatedPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: NavigationEnd;\n};\n\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nexport type RouterNavigatedAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_NAVIGATED;\n  payload: RouterNavigatedPayload<T>;\n};\n\n/**\n * A union type of router actions.\n */\nexport type RouterAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> =\n  | RouterRequestAction<V>\n  | RouterNavigationAction<V>\n  | RouterCancelAction<T, V>\n  | RouterErrorAction<T, V>\n  | RouterNavigatedAction<V>;\n","import { Action } from '@ngrx/store';\nimport {\n  ROUTER_CANCEL,\n  ROUTER_ERROR,\n  ROUTER_NAVIGATION,\n  RouterAction,\n} from './actions';\nimport { BaseRouterStoreState } from './serializers/base';\nimport { SerializedRouterStateSnapshot } from './serializers/default_serializer';\n\nexport type RouterReducerState<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  state: T;\n  navigationId: number;\n};\n\nexport function routerReducer<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n>(\n  state: RouterReducerState<T> | undefined,\n  action: Action\n): RouterReducerState<T> {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  const routerAction = action as RouterAction<any, T>;\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id,\n      };\n    default:\n      return state as RouterReducerState<T>;\n  }\n}\n","import { RouterStateSnapshot } from '@angular/router';\n\n/**\n * Simple router state.\n * All custom router states / state serializers should have at least\n * the properties of this interface.\n */\nexport interface BaseRouterStoreState {\n  url: string;\n}\n\nexport abstract class RouterStateSerializer<\n  T extends BaseRouterStoreState = BaseRouterStoreState\n> {\n  abstract serialize(routerState: RouterStateSnapshot): T;\n}\n","import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { BaseRouterStoreState, RouterStateSerializer } from './base';\n\nexport interface SerializedRouterStateSnapshot extends BaseRouterStoreState {\n  root: ActivatedRouteSnapshot;\n  url: string;\n}\n\nexport class DefaultRouterStateSerializer\n  implements RouterStateSerializer<SerializedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): SerializedRouterStateSnapshot {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url,\n    };\n  }\n\n  private serializeRoute(\n    route: ActivatedRouteSnapshot\n  ): ActivatedRouteSnapshot {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      paramMap: route.paramMap,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig\n        ? {\n            component: route.routeConfig.component,\n            path: route.routeConfig.path,\n            pathMatch: route.routeConfig.pathMatch,\n            redirectTo: route.routeConfig.redirectTo,\n            outlet: route.routeConfig.outlet,\n          }\n        : null,\n      queryParams: route.queryParams,\n      queryParamMap: route.queryParamMap,\n      fragment: route.fragment,\n      component: (route.routeConfig\n        ? route.routeConfig.component\n        : undefined) as any,\n      root: undefined as any,\n      parent: undefined as any,\n      firstChild: children[0],\n      pathFromRoot: undefined as any,\n      children,\n    };\n  }\n}\n","import { RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { BaseRouterStoreState, RouterStateSerializer } from './base';\n\nexport interface MinimalActivatedRouteSnapshot {\n  routeConfig: ActivatedRouteSnapshot['routeConfig'];\n  url: ActivatedRouteSnapshot['url'];\n  params: ActivatedRouteSnapshot['params'];\n  queryParams: ActivatedRouteSnapshot['queryParams'];\n  fragment: ActivatedRouteSnapshot['fragment'];\n  data: ActivatedRouteSnapshot['data'];\n  outlet: ActivatedRouteSnapshot['outlet'];\n  firstChild?: MinimalActivatedRouteSnapshot;\n  children: MinimalActivatedRouteSnapshot[];\n}\n\nexport interface MinimalRouterStateSnapshot extends BaseRouterStoreState {\n  root: MinimalActivatedRouteSnapshot;\n  url: string;\n}\n\nexport class MinimalRouterStateSerializer\n  implements RouterStateSerializer<MinimalRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): MinimalRouterStateSnapshot {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url,\n    };\n  }\n\n  private serializeRoute(\n    route: ActivatedRouteSnapshot\n  ): MinimalActivatedRouteSnapshot {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig\n        ? {\n            path: route.routeConfig.path,\n            pathMatch: route.routeConfig.pathMatch,\n            redirectTo: route.routeConfig.redirectTo,\n            outlet: route.routeConfig.outlet,\n          }\n        : null,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      firstChild: children[0],\n      children,\n    };\n  }\n}\n","import {\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  ErrorHandler,\n} from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  NavigationEnd,\n  Router,\n  RoutesRecognized,\n  NavigationStart,\n  Event,\n  RouterEvent,\n} from '@angular/router';\nimport { select, Selector, Store } from '@ngrx/store';\nimport { withLatestFrom } from 'rxjs/operators';\n\nimport {\n  ROUTER_CANCEL,\n  ROUTER_ERROR,\n  ROUTER_NAVIGATED,\n  ROUTER_NAVIGATION,\n  ROUTER_REQUEST,\n} from './actions';\nimport { RouterReducerState } from './reducer';\nimport {\n  RouterStateSerializer,\n  BaseRouterStoreState,\n} from './serializers/base';\nimport {\n  DefaultRouterStateSerializer,\n  SerializedRouterStateSnapshot,\n} from './serializers/default_serializer';\nimport { MinimalRouterStateSerializer } from './serializers/minimal_serializer';\n\nexport type StateKeyOrSelector<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = string | Selector<any, RouterReducerState<T>>;\n\n/**\n * Full = Serializes the router event with DefaultRouterStateSerializer\n * Minimal = Serializes the router event with MinimalRouterStateSerializer\n */\nexport const enum RouterState {\n  Full,\n  Minimal,\n}\n\nexport interface StoreRouterConfig<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> {\n  stateKey?: StateKeyOrSelector<T>;\n  serializer?: new (...args: any[]) => RouterStateSerializer;\n  /**\n   * By default, ROUTER_NAVIGATION is dispatched before guards and resolvers run.\n   * Therefore, the action could run too soon, for example\n   * there may be a navigation cancel due to a guard saying the navigation is not allowed.\n   * To run ROUTER_NAVIGATION after guards and resolvers,\n   * set this property to NavigationActionTiming.PostActivation.\n   */\n  navigationActionTiming?: NavigationActionTiming;\n  /**\n   * Decides which router serializer should be used, if there is none provided, and the metadata on the dispatched @ngrx/router-store action payload.\n   * Set to `Full` to use the `DefaultRouterStateSerializer` and to set the angular router events as payload.\n   * Set to `Minimal` to use the `MinimalRouterStateSerializer` and to set a minimal router event with the navigation id and url as payload.\n   */\n  routerState?: RouterState;\n}\n\ninterface StoreRouterActionPayload {\n  event: RouterEvent;\n  routerState?: SerializedRouterStateSnapshot;\n  storeState?: any;\n}\n\nexport enum NavigationActionTiming {\n  PreActivation = 1,\n  PostActivation = 2,\n}\n\nexport const _ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Internal Configuration'\n);\nexport const ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Configuration'\n);\nexport const DEFAULT_ROUTER_FEATURENAME = 'router';\n\nexport function _createRouterConfig(\n  config: StoreRouterConfig\n): StoreRouterConfig {\n  return {\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: DefaultRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation,\n    ...config,\n  };\n}\n\nenum RouterTrigger {\n  NONE = 1,\n  ROUTER = 2,\n  STORE = 3,\n}\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n@NgModule({})\nexport class StoreRouterConnectingModule {\n  static forRoot<\n    T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n  >(\n    config: StoreRouterConfig<T> = {}\n  ): ModuleWithProviders<StoreRouterConnectingModule> {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [\n        { provide: _ROUTER_CONFIG, useValue: config },\n        {\n          provide: ROUTER_CONFIG,\n          useFactory: _createRouterConfig,\n          deps: [_ROUTER_CONFIG],\n        },\n        {\n          provide: RouterStateSerializer,\n          useClass: config.serializer\n            ? config.serializer\n            : config.routerState === RouterState.Minimal\n              ? MinimalRouterStateSerializer\n              : DefaultRouterStateSerializer,\n        },\n      ],\n    };\n  }\n\n  private lastEvent: Event | null = null;\n  private routerState: SerializedRouterStateSnapshot | null;\n  private storeState: any;\n  private trigger = RouterTrigger.NONE;\n\n  private stateKey: StateKeyOrSelector;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private serializer: RouterStateSerializer<SerializedRouterStateSnapshot>,\n    private errorHandler: ErrorHandler,\n    @Inject(ROUTER_CONFIG) private config: StoreRouterConfig\n  ) {\n    this.stateKey = this.config.stateKey as StateKeyOrSelector;\n\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n\n  private setUpStoreStateListener(): void {\n    this.store\n      .pipe(\n        select(this.stateKey as any),\n        withLatestFrom(this.store)\n      )\n      .subscribe(([routerStoreState, storeState]) => {\n        this.navigateIfNeeded(routerStoreState, storeState);\n      });\n  }\n\n  private navigateIfNeeded(\n    routerStoreState: RouterReducerState,\n    storeState: any\n  ): void {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n\n    const url = routerStoreState.state.url;\n    if (this.router.url !== url) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch(error => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n\n  private setUpRouterEventsListener(): void {\n    const dispatchNavLate =\n      this.config.navigationActionTiming ===\n      NavigationActionTiming.PostActivation;\n    let routesRecognized: RoutesRecognized;\n\n    this.router.events\n      .pipe(withLatestFrom(this.store))\n      .subscribe(([event, storeState]) => {\n        this.lastEvent = event;\n\n        if (event instanceof NavigationStart) {\n          this.routerState = this.serializer.serialize(\n            this.router.routerState.snapshot\n          );\n          if (this.trigger !== RouterTrigger.STORE) {\n            this.storeState = storeState;\n            this.dispatchRouterRequest(event);\n          }\n        } else if (event instanceof RoutesRecognized) {\n          routesRecognized = event;\n\n          if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n            this.dispatchRouterNavigation(event);\n          }\n        } else if (event instanceof NavigationCancel) {\n          this.dispatchRouterCancel(event);\n          this.reset();\n        } else if (event instanceof NavigationError) {\n          this.dispatchRouterError(event);\n          this.reset();\n        } else if (event instanceof NavigationEnd) {\n          if (this.trigger !== RouterTrigger.STORE) {\n            if (dispatchNavLate) {\n              this.dispatchRouterNavigation(routesRecognized);\n            }\n            this.dispatchRouterNavigated(event);\n          }\n          this.reset();\n        }\n      });\n  }\n\n  private dispatchRouterRequest(event: NavigationStart): void {\n    this.dispatchRouterAction(ROUTER_REQUEST, { event });\n  }\n\n  private dispatchRouterNavigation(\n    lastRoutesRecognized: RoutesRecognized\n  ): void {\n    const nextRouterState = this.serializer.serialize(\n      lastRoutesRecognized.state\n    );\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(\n        lastRoutesRecognized.id,\n        lastRoutesRecognized.url,\n        lastRoutesRecognized.urlAfterRedirects,\n        nextRouterState\n      ),\n    });\n  }\n\n  private dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event,\n    });\n  }\n\n  private dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`),\n    });\n  }\n\n  private dispatchRouterNavigated(event: NavigationEnd): void {\n    const routerState = this.serializer.serialize(\n      this.router.routerState.snapshot\n    );\n    this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n  }\n\n  private dispatchRouterAction(\n    type: string,\n    payload: StoreRouterActionPayload\n  ): void {\n    this.trigger = RouterTrigger.ROUTER;\n    try {\n      this.store.dispatch({\n        type,\n        payload: {\n          routerState: this.routerState,\n          ...payload,\n          event:\n            this.config.routerState === RouterState.Minimal\n              ? { id: payload.event.id, url: payload.event.url }\n              : payload.event,\n        },\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n\n  private reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n}\n","import { createSelector } from '@ngrx/store';\nimport { RouterStateSelectors } from './models';\nimport { RouterReducerState } from './reducer';\n\nexport function getSelectors<V>(\n  selectState: (state: V) => RouterReducerState<any>\n): RouterStateSelectors<V>;\nexport function getSelectors<V>(\n  selectState: (state: V) => RouterReducerState<any>\n): RouterStateSelectors<V> {\n  const selectRouterState = createSelector(\n    selectState,\n    router => router && router.state\n  );\n  const selectCurrentRoute = createSelector(selectRouterState, routerState => {\n    if (!routerState) {\n      return undefined;\n    }\n    let route = routerState.root;\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n    return route;\n  });\n  const selectQueryParams = createSelector(\n    selectCurrentRoute,\n    route => route && route.queryParams\n  );\n  const selectQueryParam = (param: string) =>\n    createSelector(selectQueryParams, params => params && params[param]);\n  const selectRouteParams = createSelector(\n    selectCurrentRoute,\n    route => route && route.params\n  );\n  const selectRouteParam = (param: string) =>\n    createSelector(selectRouteParams, params => params && params[param]);\n  const selectRouteData = createSelector(\n    selectCurrentRoute,\n    route => route && route.data\n  );\n  const selectUrl = createSelector(\n    selectRouterState,\n    routerState => routerState && routerState.url\n  );\n\n  return {\n    selectCurrentRoute,\n    selectQueryParams,\n    selectQueryParam,\n    selectRouteParams,\n    selectRouteParam,\n    selectRouteData,\n    selectUrl,\n  };\n}\n","/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {_ROUTER_CONFIG as Éµngrx_modules_router_store_router_store_a,_createRouterConfig as Éµngrx_modules_router_store_router_store_b} from './src/router_store_module';"],"names":["tslib_1.__param"],"mappings":"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"}
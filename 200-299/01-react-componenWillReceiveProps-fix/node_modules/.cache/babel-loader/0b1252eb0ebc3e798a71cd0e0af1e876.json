{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../utils\");\n\nvar Context =\n/** @class */\nfunction () {\n  function Context(params, logger) {\n    this.beans = {};\n    this.componentsMappedByName = {};\n    this.destroyed = false;\n\n    if (!params || !params.beans) {\n      return;\n    }\n\n    this.contextParams = params;\n    this.logger = logger;\n    this.logger.log(\">> creating ag-Application Context\");\n    this.setupComponents();\n    this.createBeans();\n    var beans = utils_1.Utils.mapObject(this.beans, function (beanEntry) {\n      return beanEntry.beanInstance;\n    });\n    this.wireBeans(beans);\n    this.logger.log(\">> ag-Application Context ready - component is alive\");\n  }\n\n  Context.prototype.setupComponents = function () {\n    var _this = this;\n\n    if (this.contextParams.components) {\n      this.contextParams.components.forEach(function (componentMeta) {\n        return _this.addComponent(componentMeta);\n      });\n    }\n  };\n\n  Context.prototype.addComponent = function (componentMeta) {\n    // get name of the class as a string\n    // let className = _.getNameOfClass(ComponentClass);\n    // insert a dash after every capital letter\n    // let classEscaped = className.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n    var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase(); // put all to upper case\n\n    var classUpperCase = classEscaped.toUpperCase(); // finally store\n\n    this.componentsMappedByName[classUpperCase] = componentMeta.theClass;\n  };\n\n  Context.prototype.createComponent = function (element, afterPreCreateCallback) {\n    var key = element.nodeName;\n\n    if (this.componentsMappedByName && this.componentsMappedByName[key]) {\n      var newComponent = new this.componentsMappedByName[key]();\n      this.wireBean(newComponent, afterPreCreateCallback);\n      return newComponent;\n    } else {\n      return null;\n    }\n  };\n\n  Context.prototype.wireBean = function (bean, afterPreCreateCallback) {\n    if (!bean) {\n      throw Error(\"Can't wire to bean since it is null\");\n    }\n\n    this.wireBeans([bean], afterPreCreateCallback);\n  };\n\n  Context.prototype.wireBeans = function (beans, afterPreCreateCallback) {\n    this.autoWireBeans(beans);\n    this.methodWireBeans(beans);\n    this.preConstruct(beans); // the callback sets the attributes, so the component has access to attributes\n    // before postConstruct methods in the component are executed\n\n    if (utils_1.Utils.exists(afterPreCreateCallback)) {\n      beans.forEach(afterPreCreateCallback);\n    }\n\n    this.postConstruct(beans);\n  };\n\n  Context.prototype.createBeans = function () {\n    var _this = this; // register all normal beans\n\n\n    this.contextParams.beans.forEach(this.createBeanEntry.bind(this)); // register override beans, these will overwrite beans above of same name\n\n    if (this.contextParams.overrideBeans) {\n      this.contextParams.overrideBeans.forEach(this.createBeanEntry.bind(this));\n    } // instantiate all beans - overridden beans will be left out\n\n\n    utils_1.Utils.iterateObject(this.beans, function (key, beanEntry) {\n      var constructorParamsMeta;\n\n      if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {\n        constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;\n      }\n\n      var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);\n\n      var newInstance = applyToConstructor(beanEntry.bean, constructorParams);\n      beanEntry.beanInstance = newInstance;\n\n      _this.logger.log(\"bean \" + _this.getBeanName(newInstance) + \" created\");\n    });\n  };\n\n  Context.prototype.createBeanEntry = function (Bean) {\n    var metaData = Bean.__agBeanMetaData;\n\n    if (!metaData) {\n      var beanName = void 0;\n\n      if (Bean.prototype.constructor) {\n        beanName = Bean.prototype.constructor.name;\n      } else {\n        beanName = \"\" + Bean;\n      }\n\n      console.error(\"context item \" + beanName + \" is not a bean\");\n      return;\n    }\n\n    var beanEntry = {\n      bean: Bean,\n      beanInstance: null,\n      beanName: metaData.beanName\n    };\n    this.beans[metaData.beanName] = beanEntry;\n  };\n\n  Context.prototype.autoWireBeans = function (beans) {\n    var _this = this;\n\n    beans.forEach(function (bean) {\n      return _this.autoWireBean(bean);\n    });\n  };\n\n  Context.prototype.methodWireBeans = function (beans) {\n    var _this = this;\n\n    beans.forEach(function (bean) {\n      if (!bean) {\n        throw Error(\"Can't wire to bean since it is null\");\n      }\n\n      return _this.methodWireBean(bean);\n    });\n  };\n\n  Context.prototype.autoWireBean = function (bean) {\n    var _this = this;\n\n    var currentBean = bean;\n\n    var _loop_1 = function _loop_1() {\n      var currentConstructor = currentBean.constructor;\n\n      if (currentConstructor.__agBeanMetaData && currentConstructor.__agBeanMetaData.agClassAttributes) {\n        var attributes = currentConstructor.__agBeanMetaData.agClassAttributes;\n\n        if (!attributes) {\n          return {\n            value: void 0\n          };\n        }\n\n        var beanName_1 = this_1.getBeanName(currentConstructor);\n        attributes.forEach(function (attribute) {\n          var otherBean = _this.lookupBeanInstance(beanName_1, attribute.beanName, attribute.optional);\n\n          bean[attribute.attributeName] = otherBean;\n        });\n      }\n\n      currentBean = Object.getPrototypeOf(currentBean) ? Object.getPrototypeOf(currentBean) : null;\n    };\n\n    var this_1 = this;\n\n    while (currentBean != null) {\n      var state_1 = _loop_1();\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n  };\n\n  Context.prototype.getBeanName = function (constructor) {\n    if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {\n      return constructor.__agBeanMetaData.beanName;\n    }\n\n    var constructorString = constructor.toString();\n    var beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n    return beanName;\n  };\n\n  Context.prototype.methodWireBean = function (bean) {\n    var _this = this;\n\n    var autowiredMethods;\n\n    if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.autowireMethods) {\n      autowiredMethods = bean.constructor.__agBeanMetaData.autowireMethods;\n    }\n\n    utils_1.Utils.iterateObject(autowiredMethods, function (methodName, wireParams) {\n      // skip constructor, as this is dealt with elsewhere\n      if (methodName === \"agConstructor\") {\n        return;\n      }\n\n      var beanName = _this.getBeanName(bean.constructor);\n\n      var initParams = _this.getBeansForParameters(wireParams, beanName);\n\n      bean[methodName].apply(bean, initParams);\n    });\n  };\n\n  Context.prototype.getBeansForParameters = function (parameters, beanName) {\n    var _this = this;\n\n    var beansList = [];\n\n    if (parameters) {\n      utils_1.Utils.iterateObject(parameters, function (paramIndex, otherBeanName) {\n        var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);\n\n        beansList[Number(paramIndex)] = otherBean;\n      });\n    }\n\n    return beansList;\n  };\n\n  Context.prototype.lookupBeanInstance = function (wiringBean, beanName, optional) {\n    if (optional === void 0) {\n      optional = false;\n    }\n\n    if (beanName === \"context\") {\n      return this;\n    } else if (this.contextParams.seed && this.contextParams.seed.hasOwnProperty(beanName)) {\n      return this.contextParams.seed[beanName];\n    } else {\n      var beanEntry = this.beans[beanName];\n\n      if (beanEntry) {\n        return beanEntry.beanInstance;\n      }\n\n      if (!optional) {\n        console.error(\"ag-Grid: unable to find bean reference \" + beanName + \" while initialising \" + wiringBean);\n      }\n\n      return null;\n    }\n  };\n\n  Context.prototype.postConstruct = function (beans) {\n    beans.forEach(function (bean) {\n      // try calling init methods\n      if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods) {\n        bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods.forEach(function (methodName) {\n          return bean[methodName]();\n        });\n      }\n    });\n  };\n\n  Context.prototype.preConstruct = function (beans) {\n    beans.forEach(function (bean) {\n      // try calling init methods\n      if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preConstructMethods) {\n        bean.constructor.__agBeanMetaData.preConstructMethods.forEach(function (methodName) {\n          return bean[methodName]();\n        });\n      }\n    });\n  };\n\n  Context.prototype.getBean = function (name) {\n    return this.lookupBeanInstance(\"getBean\", name, true);\n  };\n\n  Context.prototype.getEnterpriseDefaultComponents = function () {\n    return this.contextParams.enterpriseDefaultComponents;\n  };\n\n  Context.prototype.destroy = function () {\n    // should only be able to destroy once\n    if (this.destroyed) {\n      return;\n    }\n\n    this.logger.log(\">> Shutting down ag-Application Context\"); // try calling destroy methods\n\n    utils_1.Utils.iterateObject(this.beans, function (key, beanEntry) {\n      var bean = beanEntry.beanInstance;\n\n      if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preDestroyMethods) {\n        bean.constructor.__agBeanMetaData.preDestroyMethods.forEach(function (methodName) {\n          return bean[methodName]();\n        });\n      }\n    });\n    this.destroyed = true;\n    this.logger.log(\">> ag-Application Context shut down - component is dead\");\n  };\n\n  return Context;\n}();\n\nexports.Context = Context; // taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply\n// allows calling 'apply' on a constructor\n\nfunction applyToConstructor(constructor, argArray) {\n  var args = [null].concat(argArray);\n  var factoryFunction = constructor.bind.apply(constructor, args);\n  return new factoryFunction();\n}\n\nfunction PreConstruct(target, methodName, descriptor) {\n  var props = getOrCreateProps(target.constructor);\n\n  if (!props.postConstructMethods) {\n    props.preConstructMethods = [];\n  }\n\n  props.preConstructMethods.push(methodName);\n}\n\nexports.PreConstruct = PreConstruct;\n\nfunction PostConstruct(target, methodName, descriptor) {\n  var props = getOrCreateProps(target.constructor);\n\n  if (!props.postConstructMethods) {\n    props.postConstructMethods = [];\n  }\n\n  props.postConstructMethods.push(methodName);\n}\n\nexports.PostConstruct = PostConstruct;\n\nfunction PreDestroy(target, methodName, descriptor) {\n  var props = getOrCreateProps(target.constructor);\n\n  if (!props.preDestroyMethods) {\n    props.preDestroyMethods = [];\n  }\n\n  props.preDestroyMethods.push(methodName);\n}\n\nexports.PreDestroy = PreDestroy;\n\nfunction Bean(beanName) {\n  return function (classConstructor) {\n    var props = getOrCreateProps(classConstructor);\n    props.beanName = beanName;\n  };\n}\n\nexports.Bean = Bean;\n\nfunction Autowired(name) {\n  return function (target, propertyKey, descriptor) {\n    autowiredFunc(target, name, false, target, propertyKey, null);\n  };\n}\n\nexports.Autowired = Autowired;\n\nfunction Optional(name) {\n  return function (target, propertyKey, descriptor) {\n    autowiredFunc(target, name, true, target, propertyKey, null);\n  };\n}\n\nexports.Optional = Optional;\n\nfunction autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {\n  if (name === null) {\n    console.error(\"ag-Grid: Autowired name should not be null\");\n    return;\n  }\n\n  if (typeof index === \"number\") {\n    console.error(\"ag-Grid: Autowired should be on an attribute\");\n    return;\n  } // it's an attribute on the class\n\n\n  var props = getOrCreateProps(target.constructor);\n\n  if (!props.agClassAttributes) {\n    props.agClassAttributes = [];\n  }\n\n  props.agClassAttributes.push({\n    attributeName: methodOrAttributeName,\n    beanName: name,\n    optional: optional\n  });\n}\n\nfunction Qualifier(name) {\n  return function (classPrototype, methodOrAttributeName, index) {\n    var constructor = typeof classPrototype == \"function\" ? classPrototype : classPrototype.constructor;\n    var props;\n\n    if (typeof index === \"number\") {\n      // it's a parameter on a method\n      var methodName = void 0;\n\n      if (methodOrAttributeName) {\n        props = getOrCreateProps(constructor);\n        methodName = methodOrAttributeName;\n      } else {\n        props = getOrCreateProps(constructor);\n        methodName = \"agConstructor\";\n      }\n\n      if (!props.autowireMethods) {\n        props.autowireMethods = {};\n      }\n\n      if (!props.autowireMethods[methodName]) {\n        props.autowireMethods[methodName] = {};\n      }\n\n      props.autowireMethods[methodName][index] = name;\n    }\n  };\n}\n\nexports.Qualifier = Qualifier;\n\nfunction getOrCreateProps(target) {\n  if (!target.hasOwnProperty(\"__agBeanMetaData\")) {\n    target.__agBeanMetaData = {};\n  }\n\n  return target.__agBeanMetaData;\n}","map":null,"metadata":{},"sourceType":"script"}
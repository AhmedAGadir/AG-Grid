{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar columnController_1 = require(\"./columnController\");\n\nvar context_1 = require(\"../context/context\");\n\nvar ColumnApi =\n/** @class */\nfunction () {\n  function ColumnApi() {}\n\n  ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) {\n    this.columnController.sizeColumnsToFit(gridWidth, 'api');\n  };\n\n  ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) {\n    this.columnController.setColumnGroupOpened(group, newValue, 'api');\n  };\n\n  ColumnApi.prototype.getColumnGroup = function (name, instanceId) {\n    return this.columnController.getColumnGroup(name, instanceId);\n  };\n\n  ColumnApi.prototype.getOriginalColumnGroup = function (name) {\n    return this.columnController.getOriginalColumnGroup(name);\n  };\n\n  ColumnApi.prototype.getDisplayNameForColumn = function (column, location) {\n    return this.columnController.getDisplayNameForColumn(column, location);\n  };\n\n  ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {\n    return this.columnController.getDisplayNameForColumnGroup(columnGroup, location);\n  };\n\n  ColumnApi.prototype.getColumn = function (key) {\n    return this.columnController.getPrimaryColumn(key);\n  };\n\n  ColumnApi.prototype.setColumnState = function (columnState) {\n    return this.columnController.setColumnState(columnState, 'api');\n  };\n\n  ColumnApi.prototype.getColumnState = function () {\n    return this.columnController.getColumnState();\n  };\n\n  ColumnApi.prototype.resetColumnState = function () {\n    this.columnController.resetColumnState('api');\n  };\n\n  ColumnApi.prototype.getColumnGroupState = function () {\n    return this.columnController.getColumnGroupState();\n  };\n\n  ColumnApi.prototype.setColumnGroupState = function (stateItems) {\n    this.columnController.setColumnGroupState(stateItems, 'api');\n  };\n\n  ColumnApi.prototype.resetColumnGroupState = function () {\n    this.columnController.resetColumnGroupState('api');\n  };\n\n  ColumnApi.prototype.isPinning = function () {\n    return this.columnController.isPinningLeft() || this.columnController.isPinningRight();\n  };\n\n  ColumnApi.prototype.isPinningLeft = function () {\n    return this.columnController.isPinningLeft();\n  };\n\n  ColumnApi.prototype.isPinningRight = function () {\n    return this.columnController.isPinningRight();\n  };\n\n  ColumnApi.prototype.getDisplayedColAfter = function (col) {\n    return this.columnController.getDisplayedColAfter(col);\n  };\n\n  ColumnApi.prototype.getDisplayedColBefore = function (col) {\n    return this.columnController.getDisplayedColBefore(col);\n  };\n\n  ColumnApi.prototype.setColumnVisible = function (key, visible) {\n    this.columnController.setColumnVisible(key, visible, 'api');\n  };\n\n  ColumnApi.prototype.setColumnsVisible = function (keys, visible) {\n    this.columnController.setColumnsVisible(keys, visible, 'api');\n  };\n\n  ColumnApi.prototype.setColumnPinned = function (key, pinned) {\n    this.columnController.setColumnPinned(key, pinned, 'api');\n  };\n\n  ColumnApi.prototype.setColumnsPinned = function (keys, pinned) {\n    this.columnController.setColumnsPinned(keys, pinned, 'api');\n  };\n\n  ColumnApi.prototype.getAllColumns = function () {\n    return this.columnController.getAllPrimaryColumns();\n  };\n\n  ColumnApi.prototype.getAllGridColumns = function () {\n    return this.columnController.getAllGridColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedLeftColumns = function () {\n    return this.columnController.getDisplayedLeftColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedCenterColumns = function () {\n    return this.columnController.getDisplayedCenterColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedRightColumns = function () {\n    return this.columnController.getDisplayedRightColumns();\n  };\n\n  ColumnApi.prototype.getAllDisplayedColumns = function () {\n    return this.columnController.getAllDisplayedColumns();\n  };\n\n  ColumnApi.prototype.getAllDisplayedVirtualColumns = function () {\n    return this.columnController.getAllDisplayedVirtualColumns();\n  };\n\n  ColumnApi.prototype.moveColumn = function (key, toIndex) {\n    if (typeof key === 'number') {\n      // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n      console.log('ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n      this.columnController.moveColumnByIndex(key, toIndex, 'api');\n    } else {\n      this.columnController.moveColumn(key, toIndex, 'api');\n    }\n  };\n\n  ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) {\n    this.columnController.moveColumnByIndex(fromIndex, toIndex, 'api');\n  };\n\n  ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) {\n    this.columnController.moveColumns(columnsToMoveKeys, toIndex, 'api');\n  };\n\n  ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) {\n    this.columnController.moveRowGroupColumn(fromIndex, toIndex);\n  };\n\n  ColumnApi.prototype.setColumnAggFunc = function (column, aggFunc) {\n    this.columnController.setColumnAggFunc(column, aggFunc);\n  };\n\n  ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {\n    if (finished === void 0) {\n      finished = true;\n    }\n\n    this.columnController.setColumnWidth(key, newWidth, false, finished);\n  };\n\n  ColumnApi.prototype.setPivotMode = function (pivotMode) {\n    this.columnController.setPivotMode(pivotMode);\n  };\n\n  ColumnApi.prototype.isPivotMode = function () {\n    return this.columnController.isPivotMode();\n  };\n\n  ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {\n    return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey);\n  };\n\n  ColumnApi.prototype.setValueColumns = function (colKeys) {\n    this.columnController.setValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getValueColumns = function () {\n    return this.columnController.getValueColumns();\n  };\n\n  ColumnApi.prototype.removeValueColumn = function (colKey) {\n    this.columnController.removeValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeValueColumns = function (colKeys) {\n    this.columnController.removeValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addValueColumn = function (colKey) {\n    this.columnController.addValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addValueColumns = function (colKeys) {\n    this.columnController.addValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.setRowGroupColumns = function (colKeys) {\n    this.columnController.setRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.removeRowGroupColumn = function (colKey) {\n    this.columnController.removeRowGroupColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeRowGroupColumns = function (colKeys) {\n    this.columnController.removeRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addRowGroupColumn = function (colKey) {\n    this.columnController.addRowGroupColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addRowGroupColumns = function (colKeys) {\n    this.columnController.addRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getRowGroupColumns = function () {\n    return this.columnController.getRowGroupColumns();\n  };\n\n  ColumnApi.prototype.setPivotColumns = function (colKeys) {\n    this.columnController.setPivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.removePivotColumn = function (colKey) {\n    this.columnController.removePivotColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removePivotColumns = function (colKeys) {\n    this.columnController.removePivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addPivotColumn = function (colKey) {\n    this.columnController.addPivotColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addPivotColumns = function (colKeys) {\n    this.columnController.addPivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getPivotColumns = function () {\n    return this.columnController.getPivotColumns();\n  };\n\n  ColumnApi.prototype.getLeftDisplayedColumnGroups = function () {\n    return this.columnController.getLeftDisplayedColumnGroups();\n  };\n\n  ColumnApi.prototype.getCenterDisplayedColumnGroups = function () {\n    return this.columnController.getCenterDisplayedColumnGroups();\n  };\n\n  ColumnApi.prototype.getRightDisplayedColumnGroups = function () {\n    return this.columnController.getRightDisplayedColumnGroups();\n  };\n\n  ColumnApi.prototype.getAllDisplayedColumnGroups = function () {\n    return this.columnController.getAllDisplayedColumnGroups();\n  };\n\n  ColumnApi.prototype.autoSizeColumn = function (key) {\n    return this.columnController.autoSizeColumn(key, 'api');\n  };\n\n  ColumnApi.prototype.autoSizeColumns = function (keys) {\n    return this.columnController.autoSizeColumns(keys, 'api');\n  };\n\n  ColumnApi.prototype.autoSizeAllColumns = function () {\n    this.columnController.autoSizeAllColumns('api');\n  };\n\n  ColumnApi.prototype.setSecondaryColumns = function (colDefs) {\n    this.columnController.setSecondaryColumns(colDefs, 'api');\n  };\n\n  ColumnApi.prototype.getSecondaryColumns = function () {\n    return this.columnController.getSecondaryColumns();\n  };\n\n  ColumnApi.prototype.getPrimaryColumns = function () {\n    return this.columnController.getAllPrimaryColumns();\n  }; // below goes through deprecated items, prints message to user, then calls the new version of the same method\n\n\n  ColumnApi.prototype.columnGroupOpened = function (group, newValue) {\n    console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n    this.setColumnGroupOpened(group, newValue);\n  };\n\n  ColumnApi.prototype.hideColumns = function (colIds, hide) {\n    console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');\n    this.columnController.setColumnsVisible(colIds, !hide, 'api');\n  };\n\n  ColumnApi.prototype.hideColumn = function (colId, hide) {\n    console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');\n    this.columnController.setColumnVisible(colId, !hide, 'api');\n  };\n\n  ColumnApi.prototype.setState = function (columnState) {\n    console.error('ag-Grid: setState is deprecated, use setColumnState');\n    return this.setColumnState(columnState);\n  };\n\n  ColumnApi.prototype.getState = function () {\n    console.error('ag-Grid: getState is deprecated, use getColumnState');\n    return this.getColumnState();\n  };\n\n  ColumnApi.prototype.resetState = function () {\n    console.error('ag-Grid: resetState is deprecated, use resetColumnState');\n    this.resetColumnState();\n  };\n\n  ColumnApi.prototype.getAggregationColumns = function () {\n    console.error('ag-Grid: getAggregationColumns is deprecated, use getValueColumns');\n    return this.columnController.getValueColumns();\n  };\n\n  ColumnApi.prototype.removeAggregationColumn = function (colKey) {\n    console.error('ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n    this.columnController.removeValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeAggregationColumns = function (colKeys) {\n    console.error('ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n    this.columnController.removeValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addAggregationColumn = function (colKey) {\n    console.error('ag-Grid: addAggregationColumn is deprecated, use addValueColumn');\n    this.columnController.addValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addAggregationColumns = function (colKeys) {\n    console.error('ag-Grid: addAggregationColumns is deprecated, use addValueColumns');\n    this.columnController.addValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {\n    console.error('ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n    this.columnController.setColumnAggFunc(column, aggFunc, 'api');\n  };\n\n  ColumnApi.prototype.getDisplayNameForCol = function (column) {\n    console.error('ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n    return this.getDisplayNameForColumn(column, null);\n  };\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], ColumnApi.prototype, \"columnController\", void 0);\n\n  ColumnApi = __decorate([context_1.Bean('columnApi')], ColumnApi);\n  return ColumnApi;\n}();\n\nexports.ColumnApi = ColumnApi;","map":null,"metadata":{},"sourceType":"script"}
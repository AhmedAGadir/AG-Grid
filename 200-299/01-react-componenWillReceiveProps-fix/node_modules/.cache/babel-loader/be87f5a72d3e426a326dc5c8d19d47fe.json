{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar beanStub_1 = require(\"../context/beanStub\");\n\nvar context_1 = require(\"../context/context\");\n\nvar eventService_1 = require(\"../eventService\");\n\nvar eventKeys_1 = require(\"../eventKeys\");\n\nvar utils_1 = require(\"../utils\");\n/**\n * This class solves the 'max height' problem, where the user might want to show more data than\n * the max div height actually allows.\n */\n\n\nvar HeightScaler =\n/** @class */\nfunction (_super) {\n  __extends(HeightScaler, _super);\n\n  function HeightScaler() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // the scrollY position\n\n\n    _this.scrollY = 0; // how tall the body is\n\n    _this.uiBodyHeight = 0;\n    return _this;\n  }\n\n  HeightScaler.prototype.postConstruct = function () {\n    this.addDestroyableEventListener(this.eventService, eventKeys_1.Events.EVENT_BODY_HEIGHT_CHANGED, this.update.bind(this));\n    this.scrollBarWidth = utils_1._.getScrollbarWidth();\n    this.maxDivHeight = utils_1._.getMaxDivHeight();\n  };\n\n  HeightScaler.prototype.registerGridComp = function (gridPanel) {\n    this.gridPanel = gridPanel;\n  };\n\n  HeightScaler.prototype.isScaling = function () {\n    return this.scaling;\n  };\n\n  HeightScaler.prototype.getOffset = function () {\n    return this.offset;\n  };\n\n  HeightScaler.prototype.update = function () {\n    if (!this.scaling) {\n      return;\n    }\n\n    var newScrollY = this.gridPanel.getVScrollPosition().top;\n    var newBodyHeight = this.getUiBodyHeight();\n    var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;\n\n    if (atLeastOneChanged) {\n      this.scrollY = newScrollY;\n      this.uiBodyHeight = newBodyHeight;\n      this.calculateOffset();\n    }\n  };\n\n  HeightScaler.prototype.calculateOffset = function () {\n    this.uiContainerHeight = this.maxDivHeight;\n    this.pixelsToShave = this.modelHeight - this.uiContainerHeight;\n    this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;\n    var scrollPercent = this.scrollY / this.maxScrollY;\n    this.setOffset(scrollPercent * this.pixelsToShave);\n  };\n\n  HeightScaler.prototype.clearOffset = function () {\n    this.uiContainerHeight = this.modelHeight;\n    this.pixelsToShave = 0;\n    this.setOffset(0);\n  };\n\n  HeightScaler.prototype.setOffset = function (newOffset) {\n    // because we are talking pixels, no point in confusing things with half numbers\n    var newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;\n\n    if (this.offset !== newOffsetFloor) {\n      this.offset = newOffsetFloor;\n      this.eventService.dispatchEvent({\n        type: eventKeys_1.Events.EVENT_HEIGHT_SCALE_CHANGED\n      });\n    }\n  };\n\n  HeightScaler.prototype.setModelHeight = function (modelHeight) {\n    this.modelHeight = modelHeight;\n    this.scaling = this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;\n\n    if (this.scaling) {\n      this.calculateOffset();\n    } else {\n      this.clearOffset();\n    }\n  };\n\n  HeightScaler.prototype.getUiContainerHeight = function () {\n    return this.uiContainerHeight;\n  };\n\n  HeightScaler.prototype.getRealPixelPosition = function (modelPixel) {\n    var uiPixel = modelPixel - this.offset;\n    return uiPixel;\n  };\n\n  HeightScaler.prototype.getUiBodyHeight = function () {\n    var pos = this.gridPanel.getVScrollPosition();\n    var bodyHeight = pos.bottom - pos.top;\n\n    if (this.gridPanel.isHorizontalScrollShowing()) {\n      bodyHeight -= this.scrollBarWidth;\n    }\n\n    return bodyHeight;\n  };\n\n  HeightScaler.prototype.getScrollPositionForPixel = function (rowTop) {\n    if (this.pixelsToShave <= 0) {\n      return rowTop;\n    } else {\n      var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();\n      var scrollPercent = rowTop / modelMaxScroll;\n      var scrollPixel = this.maxScrollY * scrollPercent;\n      return scrollPixel;\n    }\n  };\n\n  __decorate([context_1.Autowired('eventService'), __metadata(\"design:type\", eventService_1.EventService)], HeightScaler.prototype, \"eventService\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], HeightScaler.prototype, \"postConstruct\", null);\n\n  HeightScaler = __decorate([context_1.Bean('heightScaler')], HeightScaler);\n  return HeightScaler;\n}(beanStub_1.BeanStub);\n\nexports.HeightScaler = HeightScaler;","map":null,"metadata":{},"sourceType":"script"}
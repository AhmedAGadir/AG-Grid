{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar componentRecipes_1 = require(\"../components/framework/componentRecipes\");\n\nvar componentResolver_1 = require(\"../components/framework/componentResolver\");\n\nvar utils_1 = require(\"../utils\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n/** Class to use a cellRenderer. */\n\n\nvar CellRendererService =\n/** @class */\nfunction () {\n  function CellRendererService() {}\n\n  CellRendererService.prototype.useCellRenderer = function (target, eTarget, params) {\n    var _this = this;\n\n    var cellRendererPromise = this.componentRecipes.newCellRenderer(target, params);\n\n    if (cellRendererPromise != null) {\n      cellRendererPromise.then(function (cellRenderer) {\n        if (cellRenderer == null) {\n          eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n        } else {\n          _this.bindToHtml(cellRendererPromise, eTarget);\n        }\n      });\n    } else {\n      eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n    }\n\n    return cellRendererPromise;\n  };\n\n  CellRendererService.prototype.useFilterCellRenderer = function (target, eTarget, params) {\n    var cellRendererPromise = this.componentRecipes.newCellRenderer(target.filterParams, params);\n\n    if (cellRendererPromise != null) {\n      this.bindToHtml(cellRendererPromise, eTarget);\n    } else {\n      if (params.valueFormatted == null && params.value == null) {\n        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        eTarget.innerText = '(' + localeTextFunc('blanks', 'Blanks') + ')';\n      } else {\n        eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n      }\n    }\n\n    return cellRendererPromise;\n  };\n\n  CellRendererService.prototype.useRichSelectCellRenderer = function (target, eTarget, params) {\n    var cellRendererPromise = this.componentRecipes.newCellRenderer(target.cellEditorParams, params);\n\n    if (cellRendererPromise != null) {\n      this.bindToHtml(cellRendererPromise, eTarget);\n    } else {\n      eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n    }\n\n    return cellRendererPromise;\n  };\n\n  CellRendererService.prototype.useInnerCellRenderer = function (target, originalColumn, eTarget, params) {\n    var _this = this;\n\n    var rendererToUsePromise = null;\n    var componentToUse = this.componentResolver.getComponentToUse(target, \"innerRenderer\", null);\n\n    if (componentToUse && componentToUse.component != null && componentToUse.source != componentResolver_1.ComponentSource.DEFAULT) {\n      //THERE IS ONE INNER CELL RENDERER HARDCODED IN THE COLDEF FOR THIS GROUP COLUMN\n      rendererToUsePromise = this.componentRecipes.newInnerCellRenderer(target, params);\n    } else {\n      var otherRenderer = this.componentResolver.getComponentToUse(originalColumn, \"cellRenderer\", null);\n\n      if (otherRenderer && otherRenderer.source != componentResolver_1.ComponentSource.DEFAULT) {\n        //Only if the original column is using an specific renderer, it it is a using a DEFAULT one\n        //ignore it\n        //THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, WE REUSE ITS RENDERER\n        rendererToUsePromise = this.componentRecipes.newCellRenderer(originalColumn, params);\n      } else if (otherRenderer && otherRenderer.source == componentResolver_1.ComponentSource.DEFAULT && utils_1._.get(originalColumn, 'cellRendererParams.innerRenderer', null)) {\n        //EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'\n        //AND HAS A INNER CELL RENDERER\n        rendererToUsePromise = this.componentRecipes.newInnerCellRenderer(originalColumn.cellRendererParams, params);\n      } else {\n        //This forces the retrieval of the default plain cellRenderer that just renders the values.\n        rendererToUsePromise = this.componentRecipes.newCellRenderer({}, params);\n      }\n    }\n\n    if (rendererToUsePromise != null) {\n      rendererToUsePromise.then(function (rendererToUse) {\n        if (rendererToUse == null) {\n          eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n          return;\n        }\n\n        _this.bindToHtml(rendererToUsePromise, eTarget);\n      });\n    } else {\n      eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n    }\n\n    return rendererToUsePromise;\n  };\n\n  CellRendererService.prototype.useFullWidthGroupRowInnerCellRenderer = function (eTarget, params) {\n    var cellRendererPromise = this.componentRecipes.newFullWidthGroupRowInnerCellRenderer(params);\n\n    if (cellRendererPromise != null) {\n      this.bindToHtml(cellRendererPromise, eTarget);\n    } else {\n      eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n    }\n\n    return cellRendererPromise;\n  };\n\n  CellRendererService.prototype.bindToHtml = function (cellRendererPromise, eTarget) {\n    cellRendererPromise.then(function (cellRenderer) {\n      var gui = cellRenderer.getGui();\n\n      if (gui != null) {\n        if (typeof gui == 'object') {\n          eTarget.appendChild(gui);\n        } else {\n          eTarget.innerHTML = gui;\n        }\n      }\n    });\n    return cellRendererPromise;\n  };\n\n  __decorate([context_1.Autowired('componentRecipes'), __metadata(\"design:type\", componentRecipes_1.ComponentRecipes)], CellRendererService.prototype, \"componentRecipes\", void 0);\n\n  __decorate([context_1.Autowired('componentResolver'), __metadata(\"design:type\", componentResolver_1.ComponentResolver)], CellRendererService.prototype, \"componentResolver\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], CellRendererService.prototype, \"gridOptionsWrapper\", void 0);\n\n  CellRendererService = __decorate([context_1.Bean('cellRendererService')], CellRendererService);\n  return CellRendererService;\n}();\n\nexports.CellRendererService = CellRendererService;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dragAndDropService_1 = require(\"../dragAndDrop/dragAndDropService\");\n\nvar columnController_1 = require(\"../columnController/columnController\");\n\nvar context_1 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar BodyDropPivotTarget =\n/** @class */\nfunction () {\n  function BodyDropPivotTarget(pinned) {\n    this.columnsToAggregate = [];\n    this.columnsToGroup = [];\n    this.columnsToPivot = [];\n    this.pinned = pinned;\n  }\n  /** Callback for when drag enters */\n\n\n  BodyDropPivotTarget.prototype.onDragEnter = function (draggingEvent) {\n    var _this = this;\n\n    this.clearColumnsList(); // in pivot mode, we don't accept any drops if functions are read only\n\n    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n      return;\n    }\n\n    var dragColumns = draggingEvent.dragItem.columns;\n    dragColumns.forEach(function (column) {\n      // we don't allow adding secondary columns\n      if (!column.isPrimary()) {\n        return;\n      }\n\n      if (column.isAnyFunctionActive()) {\n        return;\n      }\n\n      if (column.isAllowValue()) {\n        _this.columnsToAggregate.push(column);\n      } else if (column.isAllowRowGroup()) {\n        _this.columnsToGroup.push(column);\n      } else if (column.isAllowRowGroup()) {\n        _this.columnsToPivot.push(column);\n      }\n    });\n  };\n\n  BodyDropPivotTarget.prototype.getIconName = function () {\n    var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n\n    if (totalColumns > 0) {\n      return this.pinned ? dragAndDropService_1.DragAndDropService.ICON_PINNED : dragAndDropService_1.DragAndDropService.ICON_MOVE;\n    } else {\n      return null;\n    }\n  };\n  /** Callback for when drag leaves */\n\n\n  BodyDropPivotTarget.prototype.onDragLeave = function (draggingEvent) {\n    // if we are taking columns out of the center, then we remove them from the report\n    this.clearColumnsList();\n  };\n\n  BodyDropPivotTarget.prototype.clearColumnsList = function () {\n    this.columnsToAggregate.length = 0;\n    this.columnsToGroup.length = 0;\n    this.columnsToPivot.length = 0;\n  };\n  /** Callback for when dragging */\n\n\n  BodyDropPivotTarget.prototype.onDragging = function (draggingEvent) {};\n  /** Callback for when drag stops */\n\n\n  BodyDropPivotTarget.prototype.onDragStop = function (draggingEvent) {\n    if (this.columnsToAggregate.length > 0) {\n      this.columnController.addValueColumns(this.columnsToAggregate, \"toolPanelDragAndDrop\");\n    }\n\n    if (this.columnsToGroup.length > 0) {\n      this.columnController.addRowGroupColumns(this.columnsToGroup, \"toolPanelDragAndDrop\");\n    }\n\n    if (this.columnsToPivot.length > 0) {\n      this.columnController.addPivotColumns(this.columnsToPivot, \"toolPanelDragAndDrop\");\n    }\n  };\n\n  __decorate([context_1.Autowired('columnController'), __metadata(\"design:type\", columnController_1.ColumnController)], BodyDropPivotTarget.prototype, \"columnController\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], BodyDropPivotTarget.prototype, \"gridOptionsWrapper\", void 0);\n\n  return BodyDropPivotTarget;\n}();\n\nexports.BodyDropPivotTarget = BodyDropPivotTarget;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar popupEditorWrapper_1 = require(\"./cellEditors/popupEditorWrapper\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar componentResolver_1 = require(\"../components/framework/componentResolver\");\n\nvar CellEditorFactory =\n/** @class */\nfunction () {\n  function CellEditorFactory() {}\n\n  CellEditorFactory.prototype.init = function () {};\n\n  CellEditorFactory.prototype.addCellEditor = function (key, cellEditor) {\n    console.warn(\"ag-grid: since v13.3.1 this method is not supported anymore. If you want to register your own editor check the docs: https://www.ag-grid.com/javascript-grid-cell-editor/\");\n  }; // private registerEditorsFromGridOptions(): void {\n  //     let userProvidedCellEditors = this.gridOptionsWrapper.getCellEditors();\n  //     _.iterateObject(userProvidedCellEditors, (key: string, cellEditor: {new(): ICellEditor})=> {\n  //         this.addCellEditor(key, cellEditor);\n  //     });\n  // }\n\n\n  CellEditorFactory.prototype.createCellEditor = function (column, params) {\n    var _this = this;\n\n    var cellEditorPromise = this.componentResolver.createAgGridComponent(column, params, 'cellEditor', {\n      api: params.api,\n      columnApi: params.columnApi,\n      node: params.node,\n      data: params.node.data,\n      rowIndex: params.rowIndex,\n      column: params.column,\n      colDef: params.column.getColDef()\n    }, 'agCellEditor');\n    return cellEditorPromise.map(function (cellEditor) {\n      var isPopup = cellEditor.isPopup && cellEditor.isPopup();\n\n      if (!isPopup) {\n        return cellEditor;\n      }\n\n      if (_this.gridOptionsWrapper.isFullRowEdit()) {\n        console.warn('ag-Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' + '- either turn off fullRowEdit, or stop using popup editors.');\n      } // if a popup, then we wrap in a popup editor and return the popup\n\n\n      var popupEditorWrapper = new popupEditorWrapper_1.PopupEditorWrapper(cellEditor);\n\n      _this.context.wireBean(popupEditorWrapper);\n\n      popupEditorWrapper.init(params);\n      return popupEditorWrapper;\n    });\n  };\n\n  __decorate([context_1.Autowired('context'), __metadata(\"design:type\", context_1.Context)], CellEditorFactory.prototype, \"context\", void 0);\n\n  __decorate([context_1.Autowired('componentResolver'), __metadata(\"design:type\", componentResolver_1.ComponentResolver)], CellEditorFactory.prototype, \"componentResolver\", void 0);\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], CellEditorFactory.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], CellEditorFactory.prototype, \"init\", null);\n\n  CellEditorFactory = __decorate([context_1.Bean('cellEditorFactory')], CellEditorFactory);\n  return CellEditorFactory;\n}();\n\nexports.CellEditorFactory = CellEditorFactory;","map":null,"metadata":{},"sourceType":"script"}